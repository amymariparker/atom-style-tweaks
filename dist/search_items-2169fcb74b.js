searchNodes=[{"ref":"AtomTweaks.html","title":"AtomTweaks","type":"module","doc":"AtomTweaks keeps the contexts that define your domain and business logic. Contexts are also responsible for managing your data, regardless if it comes from the database, an external API or others."},{"ref":"AtomTweaks.Application.html","title":"AtomTweaks.Application","type":"module","doc":"The AtomTweaks application."},{"ref":"AtomTweaks.Application.html#config_change/3","title":"AtomTweaks.Application.config_change/3","type":"function","doc":"Callback invoked after code upgrade, if the application environment has changed. changed is a keyword list of keys and their changed values in the application environment. new is a keyword list with all new keys and their values. removed is a list with all removed keys. Callback implementation for Application.config_change/3."},{"ref":"AtomTweaks.Application.html#start/2","title":"AtomTweaks.Application.start/2","type":"function","doc":"Called when an application is started. This function is called when an application is started using Application.start/2 (and functions on top of that, such as Application.ensure_started/2). This function should start the top-level process of the application (which should be the top supervisor of the application&#39;s supervision tree if the application follows the OTP design principles around supervision). start_type defines how the application is started: :normal - used if the startup is a normal startup or if the application is distributed and is started on the current node because of a failover from another node and the application specification key :start_phases is :undefined. {:takeover, node} - used if the application is distributed and is started on the current node because of a failover on the node node. {:failover, node} - used if the application is distributed and is started on the current node because of a failover on node node, and the application specification key :start_phases is not :undefined. start_args are the arguments passed to the application in the :mod specification key (e.g., mod: {MyApp, [:my_args]}). This function should either return {:ok, pid} or {:ok, pid, state} if startup is successful. pid should be the PID of the top supervisor. state can be an arbitrary term, and if omitted will default to []; if the application is later stopped, state is passed to the stop/1 callback (see the documentation for the c:stop/1 callback for more information). use Application provides no default implementation for the start/2 callback. Callback implementation for Application.start/2."},{"ref":"AtomTweaks.Application.html#t:octicon_name/0","title":"AtomTweaks.Application.octicon_name/0","type":"type","doc":""},{"ref":"AtomTweaks.Repo.html","title":"AtomTweaks.Repo","type":"module","doc":"Defines the Atom Tweaks database repository. Shared options Almost all of the repository operations below accept the following options: :timeout - The time in milliseconds to wait for the query call to finish, :infinity will wait indefinitely (default: 15000); :pool_timeout - The time in milliseconds to wait for calls to the pool to finish, :infinity will wait indefinitely (default: 5000); :log - When false, does not log the query Such cases will be explicitly documented as well as any extra options."},{"ref":"AtomTweaks.Repo.html#aggregate/4","title":"AtomTweaks.Repo.aggregate/4","type":"function","doc":"Calculate the given aggregate over the given field. If the query has a limit, offset or distinct set, it will be automatically wrapped in a subquery in order to return the proper result. Any preload or select in the query will be ignored in favor of the column being aggregated. The aggregation will fail if any group_by field is set. Options See the &quot;Shared options&quot; section at the module documentation. Examples # Returns the number of visits per blog post Repo.aggregate(Post, :count, :visits) # Returns the average number of visits for the top 10 query = from Post, limit: 10 Repo.aggregate(query, :avg, :visits) Callback implementation for Ecto.Repo.aggregate/4."},{"ref":"AtomTweaks.Repo.html#all/2","title":"AtomTweaks.Repo.all/2","type":"function","doc":"Fetches all entries from the data store matching the given query. May raise Ecto.QueryError if query validation fails. Options :prefix - The prefix to run the query on (such as the schema path in Postgres or the database in MySQL). This overrides the prefix set in the query. See the &quot;Shared options&quot; section at the module documentation. Example # Fetch all post titles query = from p in Post, select: p.title MyRepo.all(query) Callback implementation for Ecto.Repo.all/2."},{"ref":"AtomTweaks.Repo.html#child_spec/1","title":"AtomTweaks.Repo.child_spec/1","type":"function","doc":""},{"ref":"AtomTweaks.Repo.html#config/0","title":"AtomTweaks.Repo.config/0","type":"function","doc":"Returns the adapter configuration stored in the :otp_app environment. If the c:init/2 callback is implemented in the repository, it will be invoked with the first argument set to :dry_run. Callback implementation for Ecto.Repo.config/0."},{"ref":"AtomTweaks.Repo.html#delete/2","title":"AtomTweaks.Repo.delete/2","type":"function","doc":"Deletes a struct using its primary key. If the struct has no primary key, Ecto.NoPrimaryKeyFieldError will be raised. It returns {:ok, struct} if the struct has been successfully deleted or {:error, changeset} if there was a validation or a known constraint error. Options :prefix - The prefix to run the query on (such as the schema path in Postgres or the database in MySQL). This overrides the prefix set in the struct. See the &quot;Shared options&quot; section at the module documentation. Example post = MyRepo.get!(Post, 42) case MyRepo.delete post do {:ok, struct} -&gt; # Deleted with success {:error, changeset} -&gt; # Something went wrong end Callback implementation for Ecto.Repo.delete/2."},{"ref":"AtomTweaks.Repo.html#delete!/2","title":"AtomTweaks.Repo.delete!/2","type":"function","doc":"Same as c:delete/2 but returns the struct or raises if the changeset is invalid. Callback implementation for Ecto.Repo.delete!/2."},{"ref":"AtomTweaks.Repo.html#delete_all/2","title":"AtomTweaks.Repo.delete_all/2","type":"function","doc":"Deletes all entries matching the given query. It returns a tuple containing the number of entries and any returned result as second element. If the database does not support RETURNING in DELETE statements or no return result was selected, the second element will be nil. Options :returning - selects which fields to return. When true, returns all fields in the given struct. May be a list of fields, where a struct is still returned but only with the given fields. Or false, where nothing is returned (the default). This option is not supported by all databases. :prefix - The prefix to run the query on (such as the schema path in Postgres or the database in MySQL). This overrides the prefix set in the query. See the &quot;Shared options&quot; section at the module documentation for remaining options. Examples MyRepo.delete_all(Post) from(p in Post, where: p.id &lt; 10) |&gt; MyRepo.delete_all Callback implementation for Ecto.Repo.delete_all/2."},{"ref":"AtomTweaks.Repo.html#get/3","title":"AtomTweaks.Repo.get/3","type":"function","doc":"Fetches a single struct from the data store where the primary key matches the given id. Returns nil if no result was found. If the struct in the queryable has no or more than one primary key, it will raise an argument error. Options See the &quot;Shared options&quot; section at the module documentation. Example MyRepo.get(Post, 42) Callback implementation for Ecto.Repo.get/3."},{"ref":"AtomTweaks.Repo.html#get!/3","title":"AtomTweaks.Repo.get!/3","type":"function","doc":"Similar to c:get/3 but raises Ecto.NoResultsError if no record was found. Options See the &quot;Shared options&quot; section at the module documentation. Example MyRepo.get!(Post, 42) Callback implementation for Ecto.Repo.get!/3."},{"ref":"AtomTweaks.Repo.html#get_by/3","title":"AtomTweaks.Repo.get_by/3","type":"function","doc":"Fetches a single result from the query. Returns nil if no result was found. Options See the &quot;Shared options&quot; section at the module documentation. Example MyRepo.get_by(Post, title: &quot;My post&quot;) Callback implementation for Ecto.Repo.get_by/3."},{"ref":"AtomTweaks.Repo.html#get_by!/3","title":"AtomTweaks.Repo.get_by!/3","type":"function","doc":"Similar to get_by/3 but raises Ecto.NoResultsError if no record was found. Options See the &quot;Shared options&quot; section at the module documentation. Example MyRepo.get_by!(Post, title: &quot;My post&quot;) Callback implementation for Ecto.Repo.get_by!/3."},{"ref":"AtomTweaks.Repo.html#in_transaction?/0","title":"AtomTweaks.Repo.in_transaction?/0","type":"function","doc":"Returns true if the current process is inside a transaction. Examples MyRepo.in_transaction? #=&gt; false MyRepo.transaction(fn -&gt; MyRepo.in_transaction? #=&gt; true end) Callback implementation for Ecto.Repo.in_transaction?/0."},{"ref":"AtomTweaks.Repo.html#insert/2","title":"AtomTweaks.Repo.insert/2","type":"function","doc":"Inserts a struct defined via Ecto.Schema or a changeset. In case a struct is given, the struct is converted into a changeset with all non-nil fields as part of the changeset. In case a changeset is given, the changes in the changeset are merged with the struct fields, and all of them are sent to the database. It returns {:ok, struct} if the struct has been successfully inserted or {:error, changeset} if there was a validation or a known constraint error. Options :returning - selects which fields to return. When true, returns all fields in the given struct. May be a list of fields, where a struct is still returned but only with the given fields. In any case, it will include fields with read_after_writes set to true. This option is not supported by all databases. :prefix - The prefix to run the query on (such as the schema path in Postgres or the database in MySQL). This overrides the prefix set in the struct. :on_conflict - It may be one of :raise (the default), :nothing, :replace_all, a keyword list of update instructions or an Ecto.Query query for updates. See the &quot;Upserts&quot; section for more information. :conflict_target - Which columns to verify for conflicts. If none is specified, the conflict target is left up to the database and is usually made of primary keys and/or unique/exclusion constraints. May also be {:constraint, constraint_name_as_atom} in databases that support the &quot;ON CONSTRAINT&quot; expression. See the &quot;Shared options&quot; section at the module documentation. Examples A typical example is calling MyRepo.insert/1 with a struct and acting on the return value: case MyRepo.insert %Post{title: &quot;Ecto is great&quot;} do {:ok, struct} -&gt; # Inserted with success {:error, changeset} -&gt; # Something went wrong end Upserts c:insert/2 provides upserts (update or inserts) via the :on_conflict option. The :on_conflict option supports the following values: :raise - raises if there is a conflicting primary key or unique index :nothing - ignores the error in case of conflicts :replace_all - replace all values on the existing row with the values in the excluded row (the record given in the function parameters) a keyword list of update instructions - such as the one given to c:update_all/3, for example: [set: [title: &quot;new title&quot;]] an Ecto.Query that will act as an UPDATE statement, such as the one given to c:update_all/3 Upserts map to &quot;ON CONFLICT&quot; on databases like Postgres and &quot;ON DUPLICATE KEY&quot; on databases such as MySQL. As an example, imagine :title is marked as a unique column in the database: {:ok, inserted} = MyRepo.insert(%Post{title: &quot;this is unique&quot;}) Now we can insert with the same title but do nothing on conflicts: {:ok, ignored} = MyRepo.insert(%Post{title: &quot;this is unique&quot;}, on_conflict: :nothing) assert ignored.id == nil Because we used on_conflict: :nothing, instead of getting an error, we got {:ok, struct}. However the returned struct does not reflect the data in the database. One possible mechanism to detect if an insert or nothing happened in case of on_conflict: :nothing is by checking the id field. id will be nil if the field is autogenerated by the database and no insert happened. For actual upserts, where an insert or update may happen, the situation is slightly more complex, as the database does not actually inform us if an insert or update happened. Let&#39;s insert a post with the same title but use a query to update the body column in case of conflicts: # In Postgres (it requires the conflict target for updates): on_conflict = [set: [body: &quot;updated&quot;]] {:ok, updated} = MyRepo.insert(%Post{title: &quot;this is unique&quot;}, on_conflict: on_conflict, conflict_target: :title) # In MySQL (conflict target is not supported): on_conflict = [set: [title: &quot;updated&quot;]] {:ok, updated} = MyRepo.insert(%Post{id: inserted.id, title: &quot;updated&quot;}, on_conflict: on_conflict) In the examples above, even though it returned :ok, we do not know if we inserted new data or if we updated only the :on_conflict fields. In case an update happened, the data in the struct most likely does not match the data in the database. For example, autogenerated fields such as inserted_at will point to now rather than the time the struct was actually inserted. If you need to guarantee the data in the returned struct mirrors the database, you have three options: Use on_conflict: :replace_all, although that will replace all fields in the database with current ones: MyRepo.insert(%Post{title: &quot;this is unique&quot;}, on_conflict: :replace_all, conflict_target: :title) Specify read_after_writes: true in your schema for choosing fields that are read from the database after every operation. Or pass returning: true to insert to read all fields back: MyRepo.insert(%Post{title: &quot;this is unique&quot;}, returning: true, on_conflict: on_conflict, conflict_target: :title) Alternatively, read the data again from the database in a separate query. This option requires the primary key to be generated by the database: {:ok, updated} = MyRepo.insert(%Post{title: &quot;this is unique&quot;}, on_conflict: on_conflict) Repo.get(Post, updated.id) Because of the inability to know if the struct is up to date or not, using associations with the :on_conflict option is not recommended. For instance, Ecto may even trigger constraint violations when associations are used with on_conflict: :nothing, as no ID will be available in the case the record already exists, and it is not possible for Ecto to detect such cases reliably. Callback implementation for Ecto.Repo.insert/2."},{"ref":"AtomTweaks.Repo.html#insert!/2","title":"AtomTweaks.Repo.insert!/2","type":"function","doc":"Same as c:insert/2 but returns the struct or raises if the changeset is invalid. Callback implementation for Ecto.Repo.insert!/2."},{"ref":"AtomTweaks.Repo.html#insert_all/3","title":"AtomTweaks.Repo.insert_all/3","type":"function","doc":"Inserts all entries into the repository. It expects a schema (MyApp.User) or a source (&quot;users&quot;) or both ({&quot;users&quot;, MyApp.User}) as the first argument. The second argument is a list of entries to be inserted, either as keyword lists or as maps. It returns a tuple containing the number of entries and any returned result as second element. If the database does not support RETURNING in INSERT statements or no return result was selected, the second element will be nil. When a schema is given, the values given will be properly dumped before being sent to the database. If the schema contains an autogenerated ID field, it will be handled either at the adapter or the storage layer. However any other autogenerated value, like timestamps, won&#39;t be autogenerated when using c:insert_all/3. This is by design as this function aims to be a more direct way to insert data into the database without the conveniences of c:insert/2. This is also consistent with c:update_all/3 that does not handle timestamps as well. It is also not possible to use insert_all to insert across multiple tables, therefore associations are not supported. If a source is given, without a schema, the given fields are passed as is to the adapter. Options :returning - selects which fields to return. When true, returns all fields in the given struct. May be a list of fields, where a struct is still returned but only with the given fields. Or false, where nothing is returned (the default). This option is not supported by all databases. :prefix - The prefix to run the query on (such as the schema path in Postgres or the database in MySQL). :on_conflict - It may be one of :raise (the default), :nothing, :replace_all, a keyword list of update instructions or an Ecto.Query query for updates. See the &quot;Upserts&quot; section for more information. :conflict_target - Which columns to verify for conflicts. If none is specified, the conflict target is left up to the database and is usually made of primary keys and/or unique/exclusion constraints. May also be {:constraint, constraint_name_as_atom} in databases that support the &quot;ON CONSTRAINT&quot; expression. See the &quot;Shared options&quot; section at the module documentation for remaining options. Examples MyRepo.insert_all(Post, [[title: &quot;My first post&quot;], [title: &quot;My second post&quot;]]) MyRepo.insert_all(Post, [%{title: &quot;My first post&quot;}, %{title: &quot;My second post&quot;}]) Upserts c:insert_all/3 provides upserts (update or inserts) via the :on_conflict option. The :on_conflict option supports the following values: :raise - raises if there is a conflicting primary key or unique index :nothing - ignores the error in case of conflicts :replace_all - replace all values on the existing row with the values in the excluded row (the corresponding record given in the function parameters) a keyword list of update instructions - such as the one given to c:update_all/3, for example: [set: [title: &quot;new title&quot;]] an Ecto.Query that will act as an UPDATE statement, such as the one given to c:update_all/3 Upserts map to &quot;ON CONFLICT&quot; on databases like Postgres and &quot;ON DUPLICATE KEY&quot; on databases such as MySQL. Return values By default, both Postgres and MySQL return the amount of entries inserted on c:insert_all/3. However, when the :on_conflict option is specified, Postgres will only return a row if it was affected while MySQL returns at least the number of entries attempted. For example, if :on_conflict is set to :nothing, Postgres will return 0 if no new entry was added while MySQL will still return the amount of entries attempted to be inserted, even if no entry was added. Even worse, if :on_conflict is query, MySQL will return the number of attempted entries plus the number of entries modified by the UPDATE query. Callback implementation for Ecto.Repo.insert_all/3."},{"ref":"AtomTweaks.Repo.html#insert_or_update/2","title":"AtomTweaks.Repo.insert_or_update/2","type":"function","doc":"Inserts or updates a changeset depending on whether the struct is persisted or not. The distinction whether to insert or update will be made on the Ecto.Schema.Metadata field :state. The :state is automatically set by Ecto when loading or building a schema. Please note that for this to work, you will have to load existing structs from the database. So even if the struct exists, this won&#39;t work: struct = %Post{id: &quot;existing_id&quot;, ...} MyRepo.insert_or_update changeset # =&gt; {:error, changeset} # id already exists Options :prefix - The prefix to run the query on (such as the schema path in Postgres or the database in MySQL). This overrides the prefix set in the struct. See the &quot;Shared options&quot; section at the module documentation. Example result = case MyRepo.get(Post, id) do nil -&gt; %Post{id: id} # Post not found, we build one post -&gt; post # Post exists, let&#39;s use it end |&gt; Post.changeset(changes) |&gt; MyRepo.insert_or_update case result do {:ok, struct} -&gt; # Inserted or updated with success {:error, changeset} -&gt; # Something went wrong end Callback implementation for Ecto.Repo.insert_or_update/2."},{"ref":"AtomTweaks.Repo.html#insert_or_update!/2","title":"AtomTweaks.Repo.insert_or_update!/2","type":"function","doc":"Same as c:insert_or_update/2 but returns the struct or raises if the changeset is invalid. Callback implementation for Ecto.Repo.insert_or_update!/2."},{"ref":"AtomTweaks.Repo.html#load/2","title":"AtomTweaks.Repo.load/2","type":"function","doc":"Loads data into a struct or a map. The first argument can be a schema, or a map (of types) and determines the return value: a struct or a map, respectively. The second argument data specifies fields and values that are to be loaded. It can be a map, a keyword list, or a {fields, values} tuple. Fields can be atoms or strings. Fields that are not present in the schema (or types map) are ignored. If any of the values has invalid type, an error is raised. Examples iex&gt; MyRepo.load(User, %{name: &quot;Alice&quot;, age: 25}) %User{name: &quot;Alice&quot;, age: 25} iex&gt; MyRepo.load(User, [name: &quot;Alice&quot;, age: 25]) %User{name: &quot;Alice&quot;, age: 25} data can also take form of {fields, values}: iex&gt; MyRepo.load(User, {[:name, :age], [&quot;Alice&quot;, 25]}) %User{name: &quot;Alice&quot;, age: 25, ...} The first argument can also be a types map: iex&gt; types = %{name: :string, age: :integer} iex&gt; MyRepo.load(types, %{name: &quot;Alice&quot;, age: 25}) %{name: &quot;Alice&quot;, age: 25} This function is especially useful when parsing raw query results: iex&gt; result = Ecto.Adapters.SQL.query!(MyRepo, &quot;SELECT * FROM users&quot;, []) iex&gt; Enum.map(result.rows, &amp;MyRepo.load(User, {result.columns, &amp;1})) [%User{...}, ...] Callback implementation for Ecto.Repo.load/2."},{"ref":"AtomTweaks.Repo.html#one/2","title":"AtomTweaks.Repo.one/2","type":"function","doc":"Fetches a single result from the query. Returns nil if no result was found. Raises if more than one entry. Options See the &quot;Shared options&quot; section at the module documentation. Callback implementation for Ecto.Repo.one/2."},{"ref":"AtomTweaks.Repo.html#one!/2","title":"AtomTweaks.Repo.one!/2","type":"function","doc":"Similar to c:one/2 but raises Ecto.NoResultsError if no record was found. Raises if more than one entry. Options See the &quot;Shared options&quot; section at the module documentation. Callback implementation for Ecto.Repo.one!/2."},{"ref":"AtomTweaks.Repo.html#preload/3","title":"AtomTweaks.Repo.preload/3","type":"function","doc":"Preloads all associations on the given struct or structs. This is similar to Ecto.Query.preload/3 except it allows you to preload structs after they have been fetched from the database. In case the association was already loaded, preload won&#39;t attempt to reload it. Options Besides the &quot;Shared options&quot; section at the module documentation, it accepts: :force - By default, Ecto won&#39;t preload associations that are already loaded. By setting this option to true, any existing association will be discarded and reloaded. :in_parallel - If the preloads must be done in parallel. It can only be performed when we have more than one preload and the repository is not in a transaction. Defaults to true. :prefix - the prefix to fetch preloads from. By default, queries will use the same prefix as the one in the given collection. This option allows the prefix to be changed. Examples # Use a single atom to preload an association posts = Repo.preload posts, :comments # Use a list of atoms to preload multiple associations posts = Repo.preload posts, [:comments, :authors] # Use a keyword list to preload nested associations as well posts = Repo.preload posts, [comments: [:replies, :likes], authors: []] # Use a keyword list to customize how associations are queried posts = Repo.preload posts, [comments: from(c in Comment, order_by: c.published_at)] # Use a two-element tuple for a custom query and nested association definition query = from c in Comment, order_by: c.published_at posts = Repo.preload posts, [comments: {query, [:replies, :likes]}] Note: The query given to preload may also preload its own associations. Callback implementation for Ecto.Repo.preload/3."},{"ref":"AtomTweaks.Repo.html#query/3","title":"AtomTweaks.Repo.query/3","type":"function","doc":"A convenience function for SQL-based repositories that executes the given query. See Ecto.Adapters.SQL.query/3 for more information."},{"ref":"AtomTweaks.Repo.html#query!/3","title":"AtomTweaks.Repo.query!/3","type":"function","doc":"A convenience function for SQL-based repositories that executes the given query. See Ecto.Adapters.SQL.query/3 for more information."},{"ref":"AtomTweaks.Repo.html#rollback/1","title":"AtomTweaks.Repo.rollback/1","type":"function","doc":"Rolls back the current transaction. The transaction will return the value given as {:error, value}. Callback implementation for Ecto.Repo.rollback/1."},{"ref":"AtomTweaks.Repo.html#start_link/1","title":"AtomTweaks.Repo.start_link/1","type":"function","doc":"Starts any connection pooling or supervision and return {:ok, pid} or just :ok if nothing needs to be done. Returns {:error, {:already_started, pid}} if the repo is already started or {:error, term} in case anything else goes wrong. Options See the configuration in the moduledoc for options shared between adapters, for adapter-specific configuration see the adapter&#39;s documentation. Callback implementation for Ecto.Repo.start_link/1."},{"ref":"AtomTweaks.Repo.html#stop/2","title":"AtomTweaks.Repo.stop/2","type":"function","doc":"Shuts down the repository represented by the given pid. Callback implementation for Ecto.Repo.stop/2."},{"ref":"AtomTweaks.Repo.html#stream/2","title":"AtomTweaks.Repo.stream/2","type":"function","doc":"Returns a lazy enumerable that emits all entries from the data store matching the given query. SQL adapters, such as Postgres and MySQL, can only enumerate a stream inside a transaction. May raise Ecto.QueryError if query validation fails. Options :prefix - The prefix to run the query on (such as the schema path in Postgres or the database in MySQL). This overrides the prefix set in the query :max_rows - The number of rows to load from the database as we stream. It is supported at least by Postgres and MySQL and defaults to 500. See the &quot;Shared options&quot; section at the module documentation. Example # Fetch all post titles query = from p in Post, select: p.title stream = MyRepo.stream(query) MyRepo.transaction(fn() -&gt; Enum.to_list(stream) end) Callback implementation for Ecto.Repo.stream/2."},{"ref":"AtomTweaks.Repo.html#to_sql/2","title":"AtomTweaks.Repo.to_sql/2","type":"function","doc":"A convenience function for SQL-based repositories that translates the given query to SQL. See Ecto.Adapters.SQL.query/3 for more information."},{"ref":"AtomTweaks.Repo.html#transaction/2","title":"AtomTweaks.Repo.transaction/2","type":"function","doc":"Runs the given function or Ecto.Multi inside a transaction. Use with function If an unhandled error occurs the transaction will be rolled back and the error will bubble up from the transaction function. If no error occurred the transaction will be committed when the function returns. A transaction can be explicitly rolled back by calling c:rollback/1, this will immediately leave the function and return the value given to rollback as {:error, value}. A successful transaction returns the value returned by the function wrapped in a tuple as {:ok, value}. If c:transaction/2 is called inside another transaction, the function is simply executed, without wrapping the new transaction call in any way. If there is an error in the inner transaction and the error is rescued, or the inner transaction is rolled back, the whole outer transaction is marked as tainted, guaranteeing nothing will be committed. Use with Ecto.Multi Besides functions transaction can be used with an Ecto.Multi struct. Transaction will be started, all operations applied and in case of success committed returning {:ok, changes}. In case of any errors the transaction will be rolled back and {:error, failed_operation, failed_value, changes_so_far} will be returned. You can read more about using transactions with Ecto.Multi as well as see some examples in the Ecto.Multi documentation. Options See the &quot;Shared options&quot; section at the module documentation. Examples import Ecto.Changeset, only: [change: 2] MyRepo.transaction(fn -&gt; MyRepo.update!(change(alice, balance: alice.balance - 10)) MyRepo.update!(change(bob, balance: bob.balance + 10)) end) # Roll back a transaction explicitly MyRepo.transaction(fn -&gt; p = MyRepo.insert!(%Post{}) if not Editor.post_allowed?(p) do MyRepo.rollback(:posting_not_allowed) end end) # With Ecto.Multi Ecto.Multi.new |&gt; Ecto.Multi.insert(:post, %Post{}) |&gt; MyRepo.transaction Callback implementation for Ecto.Repo.transaction/2."},{"ref":"AtomTweaks.Repo.html#update/2","title":"AtomTweaks.Repo.update/2","type":"function","doc":"Updates a changeset using its primary key. A changeset is required as it is the only mechanism for tracking dirty changes. Only the fields present in the changes part of the changeset are sent to the database. Any other, in-memory changes done to the schema are ignored. If the struct has no primary key, Ecto.NoPrimaryKeyFieldError will be raised. It returns {:ok, struct} if the struct has been successfully updated or {:error, changeset} if there was a validation or a known constraint error. Options Besides the &quot;Shared options&quot; section at the module documentation, it accepts: :force - By default, if there are no changes in the changeset, c:update/2 is a no-op. By setting this option to true, update callbacks will always be executed, even if there are no changes (including timestamps). :prefix - The prefix to run the query on (such as the schema path in Postgres or the database in MySQL). This overrides the prefix set in the struct. Example post = MyRepo.get!(Post, 42) post = Ecto.Changeset.change post, title: &quot;New title&quot; case MyRepo.update post do {:ok, struct} -&gt; # Updated with success {:error, changeset} -&gt; # Something went wrong end Callback implementation for Ecto.Repo.update/2."},{"ref":"AtomTweaks.Repo.html#update!/2","title":"AtomTweaks.Repo.update!/2","type":"function","doc":"Same as c:update/2 but returns the struct or raises if the changeset is invalid. Callback implementation for Ecto.Repo.update!/2."},{"ref":"AtomTweaks.Repo.html#update_all/3","title":"AtomTweaks.Repo.update_all/3","type":"function","doc":"Updates all entries matching the given query with the given values. It returns a tuple containing the number of entries and any returned result as second element. If the database does not support RETURNING in UPDATE statements or no return result was selected, the second element will be nil. Keep in mind this update_all will not update autogenerated fields like the updated_at columns. See Ecto.Query.update/3 for update operations that can be performed on fields. Options :returning - selects which fields to return. When true, returns all fields in the given struct. May be a list of fields, where a struct is still returned but only with the given fields. Or false, where nothing is returned (the default). This option is not supported by all databases. :prefix - The prefix to run the query on (such as the schema path in Postgres or the database in MySQL). This overrides the prefix set in the query. See the &quot;Shared options&quot; section at the module documentation for remaining options. Examples MyRepo.update_all(Post, set: [title: &quot;New title&quot;]) MyRepo.update_all(Post, inc: [visits: 1]) from(p in Post, where: p.id &lt; 10) |&gt; MyRepo.update_all(set: [title: &quot;New title&quot;]) from(p in Post, where: p.id &lt; 10, update: [set: [title: &quot;New title&quot;]]) |&gt; MyRepo.update_all([]) from(p in Post, where: p.id &lt; 10, update: [set: [title: ^new_title]]) |&gt; MyRepo.update_all([]) from(p in Post, where: p.id &lt; 10, update: [set: [title: fragment(&quot;upper(?)&quot;, ^new_title)]]) |&gt; MyRepo.update_all([]) Callback implementation for Ecto.Repo.update_all/3."},{"ref":"AtomTweaksWeb.html","title":"AtomTweaksWeb","type":"module","doc":"A module that keeps using definitions for controllers, views and so on. This can be used in your application as: use AtomTweaksWeb, :controller use AtomTweaksWeb, :view The definitions below will be executed for every view, controller, etc, so keep them short and clean, focused on imports, uses and aliases. Do NOT define functions inside the quoted expressions below."},{"ref":"AtomTweaksWeb.html#__using__/1","title":"AtomTweaksWeb.__using__/1","type":"macro","doc":"When used, dispatch to the appropriate controller/view/etc."},{"ref":"AtomTweaksWeb.html#channel/0","title":"AtomTweaksWeb.channel/0","type":"function","doc":"Imports the common code for channels."},{"ref":"AtomTweaksWeb.html#controller/0","title":"AtomTweaksWeb.controller/0","type":"function","doc":"Imports the common code for controllers."},{"ref":"AtomTweaksWeb.html#router/0","title":"AtomTweaksWeb.router/0","type":"function","doc":"Imports the common code for routers."},{"ref":"AtomTweaksWeb.html#view/0","title":"AtomTweaksWeb.view/0","type":"function","doc":"Imports the common code for views."},{"ref":"AtomTweaksWeb.Endpoint.html","title":"AtomTweaksWeb.Endpoint","type":"module","doc":""},{"ref":"AtomTweaksWeb.Endpoint.html#broadcast/3","title":"AtomTweaksWeb.Endpoint.broadcast/3","type":"function","doc":"Broadcasts a msg as event in the given topic. Callback implementation for Phoenix.Endpoint.broadcast/3."},{"ref":"AtomTweaksWeb.Endpoint.html#broadcast!/3","title":"AtomTweaksWeb.Endpoint.broadcast!/3","type":"function","doc":"Broadcasts a msg as event in the given topic. Raises in case of failures. Callback implementation for Phoenix.Endpoint.broadcast!/3."},{"ref":"AtomTweaksWeb.Endpoint.html#broadcast_from/4","title":"AtomTweaksWeb.Endpoint.broadcast_from/4","type":"function","doc":"Broadcasts a msg from the given from as event in the given topic. Callback implementation for Phoenix.Endpoint.broadcast_from/4."},{"ref":"AtomTweaksWeb.Endpoint.html#broadcast_from!/4","title":"AtomTweaksWeb.Endpoint.broadcast_from!/4","type":"function","doc":"Broadcasts a msg from the given from as event in the given topic. Raises in case of failures. Callback implementation for Phoenix.Endpoint.broadcast_from!/4."},{"ref":"AtomTweaksWeb.Endpoint.html#call/2","title":"AtomTweaksWeb.Endpoint.call/2","type":"function","doc":"Callback implementation for Plug.call/2."},{"ref":"AtomTweaksWeb.Endpoint.html#child_spec/1","title":"AtomTweaksWeb.Endpoint.child_spec/1","type":"function","doc":"Returns the child specification to start the endpoint under a supervision tree."},{"ref":"AtomTweaksWeb.Endpoint.html#config/2","title":"AtomTweaksWeb.Endpoint.config/2","type":"function","doc":"Returns the endpoint configuration for key Returns default if the key does not exist."},{"ref":"AtomTweaksWeb.Endpoint.html#config_change/2","title":"AtomTweaksWeb.Endpoint.config_change/2","type":"function","doc":"Reloads the configuration given the application environment changes."},{"ref":"AtomTweaksWeb.Endpoint.html#host/0","title":"AtomTweaksWeb.Endpoint.host/0","type":"function","doc":"Returns the host for the given endpoint."},{"ref":"AtomTweaksWeb.Endpoint.html#init/1","title":"AtomTweaksWeb.Endpoint.init/1","type":"function","doc":"Callback implementation for Plug.init/1."},{"ref":"AtomTweaksWeb.Endpoint.html#instrument/3","title":"AtomTweaksWeb.Endpoint.instrument/3","type":"macro","doc":"Instruments the given function. event is the event identifier (usually an atom) that specifies which instrumenting function to call in the instrumenter modules. runtime is metadata to be associated with the event at runtime (e.g., the query being issued if the event to instrument is a DB query). Examples instrument :render_view, %{view: &quot;index.html&quot;}, fn -&gt; render(conn, &quot;index.html&quot;) end"},{"ref":"AtomTweaksWeb.Endpoint.html#path/1","title":"AtomTweaksWeb.Endpoint.path/1","type":"function","doc":"Generates the path information when routing to this endpoint."},{"ref":"AtomTweaksWeb.Endpoint.html#script_name/0","title":"AtomTweaksWeb.Endpoint.script_name/0","type":"function","doc":"Generates the script name."},{"ref":"AtomTweaksWeb.Endpoint.html#start_link/1","title":"AtomTweaksWeb.Endpoint.start_link/1","type":"function","doc":"Starts the endpoint supervision tree."},{"ref":"AtomTweaksWeb.Endpoint.html#static_integrity/1","title":"AtomTweaksWeb.Endpoint.static_integrity/1","type":"function","doc":"Generates a base64-encoded cryptographic hash (sha512) to a static file in priv/static. Meant to be used for Subresource Integrity with CDNs."},{"ref":"AtomTweaksWeb.Endpoint.html#static_lookup/1","title":"AtomTweaksWeb.Endpoint.static_lookup/1","type":"function","doc":"Returns a two item tuple with the first item being the static_path and the second item being the static_integrity."},{"ref":"AtomTweaksWeb.Endpoint.html#static_path/1","title":"AtomTweaksWeb.Endpoint.static_path/1","type":"function","doc":"Generates a route to a static file in priv/static."},{"ref":"AtomTweaksWeb.Endpoint.html#static_url/0","title":"AtomTweaksWeb.Endpoint.static_url/0","type":"function","doc":"Generates the static URL without any path information. It uses the configuration under :static_url to generate such. It falls back to :url if :static_url is not set."},{"ref":"AtomTweaksWeb.Endpoint.html#struct_url/0","title":"AtomTweaksWeb.Endpoint.struct_url/0","type":"function","doc":"Generates the endpoint base URL but as a URI struct. It uses the configuration under :url to generate such. Useful for manipulating the URL data and passing it to URL helpers."},{"ref":"AtomTweaksWeb.Endpoint.html#subscribe/1","title":"AtomTweaksWeb.Endpoint.subscribe/1","type":"function","doc":""},{"ref":"AtomTweaksWeb.Endpoint.html#subscribe/3","title":"AtomTweaksWeb.Endpoint.subscribe/3","type":"function","doc":""},{"ref":"AtomTweaksWeb.Endpoint.html#unsubscribe/1","title":"AtomTweaksWeb.Endpoint.unsubscribe/1","type":"function","doc":"Unsubscribes the caller from the given topic. Callback implementation for Phoenix.Endpoint.unsubscribe/1."},{"ref":"AtomTweaksWeb.Endpoint.html#url/0","title":"AtomTweaksWeb.Endpoint.url/0","type":"function","doc":"Generates the endpoint base URL without any path information. It uses the configuration under :url to generate such."},{"ref":"AtomTweaksWeb.ForbiddenUserError.html","title":"AtomTweaksWeb.ForbiddenUserError","type":"exception","doc":"Exception raised when accessing a route that requires authorizations the current user does not have."},{"ref":"AtomTweaksWeb.NotLoggedInError.html","title":"AtomTweaksWeb.NotLoggedInError","type":"exception","doc":"Exception raised when accessing a route that requires being logged in when you&#39;re not."},{"ref":"AtomTweaksWeb.Router.html","title":"AtomTweaksWeb.Router","type":"module","doc":"Routes requests to the website to the appropriate controller."},{"ref":"AtomTweaksWeb.Router.html#admin_checks/2","title":"AtomTweaksWeb.Router.admin_checks/2","type":"function","doc":"Plug pipeline of additional checks for routes that require a site admin."},{"ref":"AtomTweaksWeb.Router.html#api/2","title":"AtomTweaksWeb.Router.api/2","type":"function","doc":"Plug pipeline for requests sent to the API."},{"ref":"AtomTweaksWeb.Router.html#assign_current_user/2","title":"AtomTweaksWeb.Router.assign_current_user/2","type":"function","doc":"Fetch the current user from the session and add it to conn.assigns. This will allows access to the current user in views with @current_user."},{"ref":"AtomTweaksWeb.Router.html#browser/2","title":"AtomTweaksWeb.Router.browser/2","type":"function","doc":"Plug pipeline for requests sent from a browser."},{"ref":"AtomTweaksWeb.Router.html#call/2","title":"AtomTweaksWeb.Router.call/2","type":"function","doc":"Callback invoked by Plug on every request."},{"ref":"AtomTweaksWeb.Router.html#init/1","title":"AtomTweaksWeb.Router.init/1","type":"function","doc":"Callback required by Plug that initializes the router for serving web requests."},{"ref":"AtomTweaksWeb.WrongUserError.html","title":"AtomTweaksWeb.WrongUserError","type":"exception","doc":"Exception raised when someone attempts to modify a resource they don&#39;t own."},{"ref":"AtomTweaks.Accounts.html","title":"AtomTweaks.Accounts","type":"module","doc":"Context for handling accounts and their operations."},{"ref":"AtomTweaks.Accounts.html#change_token/1","title":"AtomTweaks.Accounts.change_token/1","type":"function","doc":"Create a changeset from the given token."},{"ref":"AtomTweaks.Accounts.html#change_user/1","title":"AtomTweaks.Accounts.change_user/1","type":"function","doc":"Creates an Ecto.Changeset for tracking user changes."},{"ref":"AtomTweaks.Accounts.html#count_stars/1","title":"AtomTweaks.Accounts.count_stars/1","type":"function","doc":"Counts the number of stars belonging to user."},{"ref":"AtomTweaks.Accounts.html#count_tweaks/1","title":"AtomTweaks.Accounts.count_tweaks/1","type":"function","doc":"Counts the number of tweaks belonging to user."},{"ref":"AtomTweaks.Accounts.html#create_token/1","title":"AtomTweaks.Accounts.create_token/1","type":"function","doc":"Creates a token for a user."},{"ref":"AtomTweaks.Accounts.html#delete_token/1","title":"AtomTweaks.Accounts.delete_token/1","type":"function","doc":"Deletes the given token."},{"ref":"AtomTweaks.Accounts.html#get_token_from_code/1","title":"AtomTweaks.Accounts.get_token_from_code/1","type":"function","doc":"Gets the token from the signed token code."},{"ref":"AtomTweaks.Accounts.html#get_user/1","title":"AtomTweaks.Accounts.get_user/1","type":"function","doc":"Gets a user by name. Returns nil if no user by that name exists."},{"ref":"AtomTweaks.Accounts.html#get_user!/1","title":"AtomTweaks.Accounts.get_user!/1","type":"function","doc":"Gets a user by name. Raises Ecto.NoResultsError if no user by that name exists."},{"ref":"AtomTweaks.Accounts.html#list_stars/1","title":"AtomTweaks.Accounts.list_stars/1","type":"function","doc":"Lists all tweaks starred by user."},{"ref":"AtomTweaks.Accounts.html#list_tokens/1","title":"AtomTweaks.Accounts.list_tokens/1","type":"function","doc":"Lists all tokens owned by user."},{"ref":"AtomTweaks.Accounts.html#list_users/0","title":"AtomTweaks.Accounts.list_users/0","type":"function","doc":"Lists all users in the database."},{"ref":"AtomTweaks.Accounts.html#star_tweak/2","title":"AtomTweaks.Accounts.star_tweak/2","type":"function","doc":"Stars tweak for user."},{"ref":"AtomTweaks.Accounts.html#unstar_tweak/2","title":"AtomTweaks.Accounts.unstar_tweak/2","type":"function","doc":"Unstars tweak for user."},{"ref":"AtomTweaks.Accounts.Token.html","title":"AtomTweaks.Accounts.Token","type":"module","doc":"Represents a user access token for authenticating against the API. Fields description - Text description for remembering what the token is used for scopes - Array of access rights that control what the token is used to access Associations Must be preloaded before they can be used. user - The AtomTweaks.Accounts.User who created the token"},{"ref":"AtomTweaks.Accounts.Token.html#to_code/1","title":"AtomTweaks.Accounts.Token.to_code/1","type":"function","doc":"Generates the token code from the given token."},{"ref":"AtomTweaks.Accounts.User.html","title":"AtomTweaks.Accounts.User","type":"module","doc":"Represents a user of the application. Fields avatar_url - URL of the user&#39;s avatar github_id - GitHub database ID for the user, unused except to relate the Atom Tweaks member to their GitHub user record name - Username site_admin - true if the user is a site admin; false otherwise Associations Must be preloaded before they can be used. stars - List of AtomTweaks.Tweaks.Tweak records the user has starred tokens - List of AtomTweaks.Accounts.Token records the user has created tweaks - List of AtomTweaks.Tweaks.Tweak records the user has created or forked"},{"ref":"AtomTweaks.Accounts.User.html#t:t/0","title":"AtomTweaks.Accounts.User.t/0","type":"type","doc":""},{"ref":"AtomTweaksWeb.Admin.ReleaseNoteController.html","title":"AtomTweaksWeb.Admin.ReleaseNoteController","type":"module","doc":"Handles all admin release notes resource routes."},{"ref":"AtomTweaksWeb.Admin.ReleaseNoteController.html#create/2","title":"AtomTweaksWeb.Admin.ReleaseNoteController.create/2","type":"function","doc":"Creates a new release note."},{"ref":"AtomTweaksWeb.Admin.ReleaseNoteController.html#edit/2","title":"AtomTweaksWeb.Admin.ReleaseNoteController.edit/2","type":"function","doc":"Displays the edit form for a release note."},{"ref":"AtomTweaksWeb.Admin.ReleaseNoteController.html#index/2","title":"AtomTweaksWeb.Admin.ReleaseNoteController.index/2","type":"function","doc":"Renders the list of release notes."},{"ref":"AtomTweaksWeb.Admin.ReleaseNoteController.html#new/2","title":"AtomTweaksWeb.Admin.ReleaseNoteController.new/2","type":"function","doc":"Renders the new form for a release note."},{"ref":"AtomTweaksWeb.Admin.ReleaseNoteController.html#show/2","title":"AtomTweaksWeb.Admin.ReleaseNoteController.show/2","type":"function","doc":"Renders the release note with the given id."},{"ref":"AtomTweaksWeb.Admin.ReleaseNoteController.html#update/2","title":"AtomTweaksWeb.Admin.ReleaseNoteController.update/2","type":"function","doc":"Updates a release note."},{"ref":"AtomTweaksWeb.Api.ReleaseNoteController.html","title":"AtomTweaksWeb.Api.ReleaseNoteController","type":"module","doc":"Handles all release notes API routes."},{"ref":"AtomTweaksWeb.Api.ReleaseNoteController.html#create/2","title":"AtomTweaksWeb.Api.ReleaseNoteController.create/2","type":"function","doc":"Handles a request to create a release note. Request The request body should contain data in the format: { title: &quot;Some title&quot;, detail_url: &quot;https://github.com/lee-dohm/atom-style-tweaks/pull/1234&quot;, description: &quot;A bunch of Markdown text&quot; } All fields are required. Responses 201 Created on success 400 Bad Request on failure 403 Forbidden if the API token does not contain the release_notes/write scope"},{"ref":"AtomTweaksWeb.AuthController.html","title":"AtomTweaksWeb.AuthController","type":"module","doc":"Handles authentication for the application via GitHub OAuth2 user flow."},{"ref":"AtomTweaksWeb.AuthController.html#callback/2","title":"AtomTweaksWeb.AuthController.callback/2","type":"function","doc":"Handles the OAuth2 callback from GitHub."},{"ref":"AtomTweaksWeb.AuthController.html#delete/2","title":"AtomTweaksWeb.AuthController.delete/2","type":"function","doc":"Signs the user out by dropping the session, thereby throwing away the access token, and redirecting to the home page."},{"ref":"AtomTweaksWeb.AuthController.html#index/2","title":"AtomTweaksWeb.AuthController.index/2","type":"function","doc":"Signs the user in by redirecting to the GitHub authorization URL."},{"ref":"AtomTweaksWeb.ForkController.html","title":"AtomTweaksWeb.ForkController","type":"module","doc":"Handles requests for forked tweak records."},{"ref":"AtomTweaksWeb.ForkController.html#create/2","title":"AtomTweaksWeb.ForkController.create/2","type":"function","doc":"Forks a tweak for the currently logged in user. Redirects to the newly created tweak upon success."},{"ref":"AtomTweaksWeb.ForkController.html#index/2","title":"AtomTweaksWeb.ForkController.index/2","type":"function","doc":"Displays the list of forks of a given tweak."},{"ref":"AtomTweaksWeb.ObsoleteRouteController.html","title":"AtomTweaksWeb.ObsoleteRouteController","type":"module","doc":"Handles redirections for obsolete router paths."},{"ref":"AtomTweaksWeb.ObsoleteRouteController.html#long_tweak_path_to_short/2","title":"AtomTweaksWeb.ObsoleteRouteController.long_tweak_path_to_short/2","type":"function","doc":"Redirects the old-style long tweak paths to the new shorter ones. For example: /users/foo/tweaks/df15c988-f262-4c03-bb73-dcfd4a8161ee becomes /tweaks/df15c988-f262-4c03-bb73-dcfd4a8161ee."},{"ref":"AtomTweaksWeb.PageController.html","title":"AtomTweaksWeb.PageController","type":"module","doc":"Handles requests for the root-level pages."},{"ref":"AtomTweaksWeb.PageController.html#about/2","title":"AtomTweaksWeb.PageController.about/2","type":"function","doc":"Renders the about page."},{"ref":"AtomTweaksWeb.PageController.html#index/2","title":"AtomTweaksWeb.PageController.index/2","type":"function","doc":"Renders the home page."},{"ref":"AtomTweaksWeb.PageController.html#release_notes/2","title":"AtomTweaksWeb.PageController.release_notes/2","type":"function","doc":"Renders the release notes index page."},{"ref":"AtomTweaksWeb.StarController.html","title":"AtomTweaksWeb.StarController","type":"module","doc":"Handles requests of information about stars."},{"ref":"AtomTweaksWeb.StarController.html#index/2","title":"AtomTweaksWeb.StarController.index/2","type":"function","doc":"Shows the list of stars for the named user."},{"ref":"AtomTweaksWeb.StarController.html#toggle/2","title":"AtomTweaksWeb.StarController.toggle/2","type":"function","doc":"Toggles whether the current user has starred the tweak. After the state has been toggled, it redirects back to wherever it came from."},{"ref":"AtomTweaksWeb.StargazerController.html","title":"AtomTweaksWeb.StargazerController","type":"module","doc":"Handles requests for tweak stargazer information."},{"ref":"AtomTweaksWeb.StargazerController.html#index/2","title":"AtomTweaksWeb.StargazerController.index/2","type":"function","doc":"Displays the list of a tweak&#39;s stargazers."},{"ref":"AtomTweaksWeb.TokenController.html","title":"AtomTweaksWeb.TokenController","type":"module","doc":"Handles all requests for user token routes."},{"ref":"AtomTweaksWeb.TokenController.html#create/2","title":"AtomTweaksWeb.TokenController.create/2","type":"function","doc":"Creates a new token."},{"ref":"AtomTweaksWeb.TokenController.html#delete/2","title":"AtomTweaksWeb.TokenController.delete/2","type":"function","doc":"Deletes the token with the given id belonging to user name."},{"ref":"AtomTweaksWeb.TokenController.html#index/2","title":"AtomTweaksWeb.TokenController.index/2","type":"function","doc":"Displays the list of tokens for a user."},{"ref":"AtomTweaksWeb.TokenController.html#new/2","title":"AtomTweaksWeb.TokenController.new/2","type":"function","doc":"Displays the new token form."},{"ref":"AtomTweaksWeb.TweakController.html","title":"AtomTweaksWeb.TweakController","type":"module","doc":"Handles requests for tweak records."},{"ref":"AtomTweaksWeb.TweakController.html#create/2","title":"AtomTweaksWeb.TweakController.create/2","type":"function","doc":"Creates a new tweak with the given parameters."},{"ref":"AtomTweaksWeb.TweakController.html#delete/2","title":"AtomTweaksWeb.TweakController.delete/2","type":"function","doc":"Deletes the given tweak. Not implemented."},{"ref":"AtomTweaksWeb.TweakController.html#edit/2","title":"AtomTweaksWeb.TweakController.edit/2","type":"function","doc":"Displays the edit tweak form."},{"ref":"AtomTweaksWeb.TweakController.html#new/2","title":"AtomTweaksWeb.TweakController.new/2","type":"function","doc":"Displays the new tweak form."},{"ref":"AtomTweaksWeb.TweakController.html#show/2","title":"AtomTweaksWeb.TweakController.show/2","type":"function","doc":"Displays the given tweak."},{"ref":"AtomTweaksWeb.TweakController.html#update/2","title":"AtomTweaksWeb.TweakController.update/2","type":"function","doc":"Updates a tweak with the given parameters."},{"ref":"AtomTweaksWeb.UserController.html","title":"AtomTweaksWeb.UserController","type":"module","doc":"Handles requests for user resources."},{"ref":"AtomTweaksWeb.UserController.html#show/2","title":"AtomTweaksWeb.UserController.show/2","type":"function","doc":"Shows the named user."},{"ref":"AtomTweaks.Ecto.Markdown.html","title":"AtomTweaks.Ecto.Markdown","type":"module","doc":"An Ecto.Type that handles the conversion between a Markdown-formatted string in the database and a AtomTweaks.Markdown struct in memory. Use this as the type of the database field in the schema: defmodule AtomTweaks.Tweaks.Tweak do use Ecto.Schema schema &quot;tweaks&quot; do field :title, :string field :code, :string field :type, :string field :description, AtomTweaks.Ecto.Markdown belongs_to :user, AtomTweaks.Accounts.User, foreign_key: :created_by, type: :binary_id timestamps() end end All other references in the codebase should be to the AtomTweaks.Markdown module. See that module&#39;s documentation on how it is used. See: Beyond Functions in Elixir: Refactoring for Maintainability for details on this pattern."},{"ref":"AtomTweaks.Ecto.Markdown.html#cast/1","title":"AtomTweaks.Ecto.Markdown.cast/1","type":"function","doc":"Casts the given input to the custom type. See: Ecto.Type.cast/1"},{"ref":"AtomTweaks.Ecto.Markdown.html#dump/1","title":"AtomTweaks.Ecto.Markdown.dump/1","type":"function","doc":"Dumps the given term into an Ecto native type. See: Ecto.Type.dump/1"},{"ref":"AtomTweaks.Ecto.Markdown.html#load/1","title":"AtomTweaks.Ecto.Markdown.load/1","type":"function","doc":"Loads the given term into a custom type. See: Ecto.Type.load/1"},{"ref":"AtomTweaks.Ecto.Markdown.html#type/0","title":"AtomTweaks.Ecto.Markdown.type/0","type":"function","doc":"Returns the underlying schema type for the custom type. See: Ecto.Type.type/0"},{"ref":"AtomTweaksWeb.ApiHelpers.html","title":"AtomTweaksWeb.ApiHelpers","type":"module","doc":"Functions for assisting with API operations."},{"ref":"AtomTweaksWeb.ApiHelpers.html#authorize/2","title":"AtomTweaksWeb.ApiHelpers.authorize/2","type":"function","doc":"A function plug used within a controller that verifies that the connection is authorized to perform the action. Examples Ensures that the connection has an AtomTweaks.Accounts.Token with the required scope: plug :authorize, [required_scope: &quot;foo&quot;] when action in [:index]"},{"ref":"AtomTweaksWeb.ControllerHelpers.html","title":"AtomTweaksWeb.ControllerHelpers","type":"module","doc":"Helper functions for Controllers."},{"ref":"AtomTweaksWeb.ControllerHelpers.html#redirect_back/2","title":"AtomTweaksWeb.ControllerHelpers.redirect_back/2","type":"function","doc":"Redirects back to the last user-navigated (in other words HTTP GET) path."},{"ref":"AtomTweaksWeb.ErrorHelpers.html","title":"AtomTweaksWeb.ErrorHelpers","type":"module","doc":"Conveniences for translating and building error messages."},{"ref":"AtomTweaksWeb.ErrorHelpers.html#translate_error/1","title":"AtomTweaksWeb.ErrorHelpers.translate_error/1","type":"function","doc":"Translates an error message using gettext."},{"ref":"AtomTweaksWeb.FormHelpers.html","title":"AtomTweaksWeb.FormHelpers","type":"module","doc":"Functions for building HTML forms, specifically designed to work with GitHub Primer."},{"ref":"AtomTweaksWeb.FormHelpers.html#input/3","title":"AtomTweaksWeb.FormHelpers.input/3","type":"function","doc":"Displays the appropriate input control for the given field. Options :using -- override the built-in selection of input field based on data type. Can be any of the Phoenix.HTML.Form input function names or the following special values: :markdown -- displays a specially-formatted textarea suitable for entering or editing Markdown text :tweak_type -- displays a drop-down list of available AtomTweaks.Tweaks.Tweak types See: Dynamic forms with Phoenix"},{"ref":"AtomTweaksWeb.LinkHelpers.html","title":"AtomTweaksWeb.LinkHelpers","type":"module","doc":"Functions to assist in rendering links."},{"ref":"AtomTweaksWeb.LinkHelpers.html#safe_link/2","title":"AtomTweaksWeb.LinkHelpers.safe_link/2","type":"function","doc":""},{"ref":"AtomTweaksWeb.OcticonHelpers.html","title":"AtomTweaksWeb.OcticonHelpers","type":"module","doc":"Helper functions for displaying Octicons."},{"ref":"AtomTweaksWeb.OcticonHelpers.html#mega_octicon_for/2","title":"AtomTweaksWeb.OcticonHelpers.mega_octicon_for/2","type":"function","doc":"Draws the appropriate upsized Octicon for the given tweak. Options All options are passed through to PhoenixOcticons.octicon/2 and are then passed to Octicons.to_svg/2."},{"ref":"AtomTweaksWeb.OcticonHelpers.html#octicon_for/2","title":"AtomTweaksWeb.OcticonHelpers.octicon_for/2","type":"function","doc":"Draws the appropriate Octicon for the given tweak. Options All options are passed through to PhoenixOcticons.octicon/2 and are then passed to Octicons.to_svg/2."},{"ref":"AtomTweaksWeb.PlugHelpers.html","title":"AtomTweaksWeb.PlugHelpers","type":"module","doc":"Function plugs to be used within either a router or controller."},{"ref":"AtomTweaksWeb.PlugHelpers.html#ensure_authenticated_user/2","title":"AtomTweaksWeb.PlugHelpers.ensure_authenticated_user/2","type":"function","doc":"Verifies that there is a currently logged in user. Raises AtomTweaksWeb.NotLoggedInError when there is no user logged in. Examples Ensures that there is a currently logged in user: plug :ensure_authenticated_user when action in [:create]"},{"ref":"AtomTweaksWeb.PlugHelpers.html#ensure_site_admin/2","title":"AtomTweaksWeb.PlugHelpers.ensure_site_admin/2","type":"function","doc":"Verifies that the currently logged in user is a site admin. Raises AtomTweaksWeb.ForbiddenUserError when the current user is not a site admin. Examples Ensures that the logged in user is a site admin: plug :ensure_site_admin when action in [:create]"},{"ref":"AtomTweaksWeb.PrimerHelpers.html","title":"AtomTweaksWeb.PrimerHelpers","type":"module","doc":"View helper functions for generating elements that work with GitHub&#39;s Primer CSS framework. All functions can be used either within a template or composed together in code. Each function should always emit Phoenix.HTML.safe/0 objects or throw an exception."},{"ref":"AtomTweaksWeb.PrimerHelpers.html#avatar/2","title":"AtomTweaksWeb.PrimerHelpers.avatar/2","type":"function","doc":"Renders the avatar element for the user. See: Avatar element documentation Options :size -- value in pixels to use for both the width and height of the avatar image"},{"ref":"AtomTweaksWeb.PrimerHelpers.html#code_with_heart/0","title":"AtomTweaksWeb.PrimerHelpers.code_with_heart/0","type":"function","doc":"Renders the GitHub-style &lt;&gt; with ♥ by [author link] footer item. Retrieves the author&#39;s name and URL from the application configuration for the default application for the current module. See code_with_heart/2 for more information."},{"ref":"AtomTweaksWeb.PrimerHelpers.html#code_with_heart/2","title":"AtomTweaksWeb.PrimerHelpers.code_with_heart/2","type":"function","doc":"Renders the GitHub-style &lt;&gt; with ♥ by [author link] footer item. Retrieves the author&#39;s name and URL from the application configuration before passing to code_with_heart/3. This information can be added to the application configuration by adding the following to your config.exs: config :app_name, code_with_heart: [ name: &quot;Author&#39;s name&quot;, url: &quot;https://example.com&quot; ] Raises a AtomTweaksWeb.PrimerHelpers.MissingConfigurationError if any of the required application configuration information is not specified and this function is called. If passed two strings instead of an atom and a keyword list, this function will assume that you mean to call code_with_heart/3 with no options and do so for you."},{"ref":"AtomTweaksWeb.PrimerHelpers.html#code_with_heart/3","title":"AtomTweaksWeb.PrimerHelpers.code_with_heart/3","type":"function","doc":"Renders the GitHub-style &lt;&gt; with ♥ by [author link] footer item. The text in this element is intentionally left untranslated because the form of the element is intended to be recognizable in its specific format. Options All options are passed to the underlying HTML a element. Examples Phoenix.HTML.safe_to_string(AtomTweaksWeb.PrimerHelpers.code_with_heart(&quot;Author&#39;s Name&quot;, &quot;https://example.com&quot;)) #=&gt; &quot;&lt;svg .../&gt; with &lt;svg .../&gt; by &lt;a href=&quot;https://example.com&quot;&gt;Author&#39;s Name&lt;/a&gt;&quot;"},{"ref":"AtomTweaksWeb.PrimerHelpers.html#counter/1","title":"AtomTweaksWeb.PrimerHelpers.counter/1","type":"function","doc":"Renders a Counter element. See: Counter element documentation"},{"ref":"AtomTweaksWeb.PrimerHelpers.html#github_link/1","title":"AtomTweaksWeb.PrimerHelpers.github_link/1","type":"function","doc":"Renders a link to the project on GitHub. Retrieves the project name or URL from the application configuration for the default application."},{"ref":"AtomTweaksWeb.PrimerHelpers.html#github_link/2","title":"AtomTweaksWeb.PrimerHelpers.github_link/2","type":"function","doc":"Renders a link to the project on GitHub. If the first parameter is an atom, it retrieves the project name or URL from the application configuration. Otherwise, the project can be either the GitHub owner/project identifier or the full GitHub URL. This configuration information can be added to the application configuration by adding the following to your config.exs: config :app_name, github_link: &quot;owner/name&quot; If the configuration information is missing and the first parameter is an atom, a AtomTweaksWeb.PrimerHelpers.MissingConfigurationError is raised. Options All options are passed to the underlying HTML a element."},{"ref":"AtomTweaksWeb.PrimerHelpers.html#link_button/2","title":"AtomTweaksWeb.PrimerHelpers.link_button/2","type":"function","doc":"Renders a link that visually appears as a button. Options :to - the URL to link to"},{"ref":"AtomTweaksWeb.PrimerHelpers.html#menu/1","title":"AtomTweaksWeb.PrimerHelpers.menu/1","type":"function","doc":"Renders a menu element. See: Menu element documentation Example Slime template: = menu do = menu_item(&quot;Foo&quot;, &quot;/path/to/foo&quot;, selected: true) = menu_item(&quot;Bar&quot;, &quot;/path/to/bar&quot;) generates: &lt;nav class=&quot;menu&quot;&gt; &lt;a class=&quot;menu-item selected&quot; href=&quot;/path/to/foo&quot;&gt;Foo&lt;/a&gt; &lt;a class=&quot;menu-item&quot; href=&quot;/path/to/bar&quot;&gt;Bar&lt;/a&gt; &lt;/nav&gt;"},{"ref":"AtomTweaksWeb.PrimerHelpers.html#menu_item/3","title":"AtomTweaksWeb.PrimerHelpers.menu_item/3","type":"function","doc":"Renders a menu item element. Options :octicon - Renders an Octicon with the menu item :selected - If true, renders the menu item as selected All other options are passed through to the underlying HTML a element."},{"ref":"AtomTweaksWeb.PrimerHelpers.html#underline_nav/2","title":"AtomTweaksWeb.PrimerHelpers.underline_nav/2","type":"function","doc":"Renders an UnderlineNav element. The underline_nav_item/3 function is used to generate the nav items within the nav element. See: UnderlineNav element documentation Options All options are passed through to the underlying HTML nav element. Example Slime template: = underline_nav do = underline_nav_item &quot;Foo&quot;, &quot;/path/to/foo&quot;, selected: true = underline_nav_item &quot;Bar&quot;, &quot;/path/to/bar&quot; generates: &lt;nav class=&quot;UnderlineNav&quot;&gt; &lt;div class=&quot;UnderlineNav-body&quot;&gt; &lt;a class=&quot;UnderlineNav-item selected&quot; href=&quot;/path/to/foo&quot;&gt;Foo&lt;/a&gt; &lt;a class=&quot;UnderlineNav-item&quot; href=&quot;/path/to/bar&quot;&gt;Bar&lt;/a&gt; &lt;/div&gt; &lt;/div&gt;"},{"ref":"AtomTweaksWeb.PrimerHelpers.html#underline_nav_item/3","title":"AtomTweaksWeb.PrimerHelpers.underline_nav_item/3","type":"function","doc":"Renders an UnderlineNav-item element. Options :counter - When supplied with an integer value, renders a Counter element :selected - When true, renders this item as selected All other options are passed through to the underlying HTML a element."},{"ref":"AtomTweaksWeb.PrimerHelpers.html#t:app_name/0","title":"AtomTweaksWeb.PrimerHelpers.app_name/0","type":"type","doc":"The application name as an atom."},{"ref":"AtomTweaksWeb.RenderHelpers.html","title":"AtomTweaksWeb.RenderHelpers","type":"module","doc":"Helper functions for rendering templates."},{"ref":"AtomTweaksWeb.RenderHelpers.html#render_code/1","title":"AtomTweaksWeb.RenderHelpers.render_code/1","type":"function","doc":"Renders the code for the given tweak."},{"ref":"AtomTweaksWeb.RenderHelpers.html#render_if/3","title":"AtomTweaksWeb.RenderHelpers.render_if/3","type":"function","doc":"Renders the template if the condition is truthy."},{"ref":"AtomTweaksWeb.RenderHelpers.html#render_if/4","title":"AtomTweaksWeb.RenderHelpers.render_if/4","type":"function","doc":"Renders the template on the view if the condition is truthy."},{"ref":"AtomTweaksWeb.RenderHelpers.html#render_many_or_blank/4","title":"AtomTweaksWeb.RenderHelpers.render_many_or_blank/4","type":"function","doc":"Renders the many template if there are any items in enumerable, otherwise the blank template. Both templates must belong to the same view module."},{"ref":"AtomTweaksWeb.RenderHelpers.html#render_many_or_blank/5","title":"AtomTweaksWeb.RenderHelpers.render_many_or_blank/5","type":"function","doc":"Renders the many template on the view if there are any items in enumerable, otherwise the blank template. Both templates must belong to the same view module."},{"ref":"AtomTweaksWeb.Router.Helpers.html","title":"AtomTweaksWeb.Router.Helpers","type":"module","doc":"Module with named helpers generated from AtomTweaksWeb.Router."},{"ref":"AtomTweaksWeb.Router.Helpers.html#admin_release_note_path/2","title":"AtomTweaksWeb.Router.Helpers.admin_release_note_path/2","type":"function","doc":""},{"ref":"AtomTweaksWeb.Router.Helpers.html#admin_release_note_path/3","title":"AtomTweaksWeb.Router.Helpers.admin_release_note_path/3","type":"function","doc":""},{"ref":"AtomTweaksWeb.Router.Helpers.html#admin_release_note_path/4","title":"AtomTweaksWeb.Router.Helpers.admin_release_note_path/4","type":"function","doc":""},{"ref":"AtomTweaksWeb.Router.Helpers.html#admin_release_note_url/2","title":"AtomTweaksWeb.Router.Helpers.admin_release_note_url/2","type":"function","doc":""},{"ref":"AtomTweaksWeb.Router.Helpers.html#admin_release_note_url/3","title":"AtomTweaksWeb.Router.Helpers.admin_release_note_url/3","type":"function","doc":""},{"ref":"AtomTweaksWeb.Router.Helpers.html#admin_release_note_url/4","title":"AtomTweaksWeb.Router.Helpers.admin_release_note_url/4","type":"function","doc":""},{"ref":"AtomTweaksWeb.Router.Helpers.html#api_release_note_path/2","title":"AtomTweaksWeb.Router.Helpers.api_release_note_path/2","type":"function","doc":""},{"ref":"AtomTweaksWeb.Router.Helpers.html#api_release_note_path/3","title":"AtomTweaksWeb.Router.Helpers.api_release_note_path/3","type":"function","doc":""},{"ref":"AtomTweaksWeb.Router.Helpers.html#api_release_note_url/2","title":"AtomTweaksWeb.Router.Helpers.api_release_note_url/2","type":"function","doc":""},{"ref":"AtomTweaksWeb.Router.Helpers.html#api_release_note_url/3","title":"AtomTweaksWeb.Router.Helpers.api_release_note_url/3","type":"function","doc":""},{"ref":"AtomTweaksWeb.Router.Helpers.html#auth_path/2","title":"AtomTweaksWeb.Router.Helpers.auth_path/2","type":"function","doc":""},{"ref":"AtomTweaksWeb.Router.Helpers.html#auth_path/3","title":"AtomTweaksWeb.Router.Helpers.auth_path/3","type":"function","doc":""},{"ref":"AtomTweaksWeb.Router.Helpers.html#auth_url/2","title":"AtomTweaksWeb.Router.Helpers.auth_url/2","type":"function","doc":""},{"ref":"AtomTweaksWeb.Router.Helpers.html#auth_url/3","title":"AtomTweaksWeb.Router.Helpers.auth_url/3","type":"function","doc":""},{"ref":"AtomTweaksWeb.Router.Helpers.html#obsolete_route_path/4","title":"AtomTweaksWeb.Router.Helpers.obsolete_route_path/4","type":"function","doc":""},{"ref":"AtomTweaksWeb.Router.Helpers.html#obsolete_route_path/5","title":"AtomTweaksWeb.Router.Helpers.obsolete_route_path/5","type":"function","doc":""},{"ref":"AtomTweaksWeb.Router.Helpers.html#obsolete_route_url/4","title":"AtomTweaksWeb.Router.Helpers.obsolete_route_url/4","type":"function","doc":""},{"ref":"AtomTweaksWeb.Router.Helpers.html#obsolete_route_url/5","title":"AtomTweaksWeb.Router.Helpers.obsolete_route_url/5","type":"function","doc":""},{"ref":"AtomTweaksWeb.Router.Helpers.html#page_path/2","title":"AtomTweaksWeb.Router.Helpers.page_path/2","type":"function","doc":""},{"ref":"AtomTweaksWeb.Router.Helpers.html#page_path/3","title":"AtomTweaksWeb.Router.Helpers.page_path/3","type":"function","doc":""},{"ref":"AtomTweaksWeb.Router.Helpers.html#page_url/2","title":"AtomTweaksWeb.Router.Helpers.page_url/2","type":"function","doc":""},{"ref":"AtomTweaksWeb.Router.Helpers.html#page_url/3","title":"AtomTweaksWeb.Router.Helpers.page_url/3","type":"function","doc":""},{"ref":"AtomTweaksWeb.Router.Helpers.html#path/2","title":"AtomTweaksWeb.Router.Helpers.path/2","type":"function","doc":"Generates the path information including any necessary prefix."},{"ref":"AtomTweaksWeb.Router.Helpers.html#static_integrity/2","title":"AtomTweaksWeb.Router.Helpers.static_integrity/2","type":"function","doc":"Generates an integrity hash to a static asset given its file path."},{"ref":"AtomTweaksWeb.Router.Helpers.html#static_path/2","title":"AtomTweaksWeb.Router.Helpers.static_path/2","type":"function","doc":"Generates path to a static asset given its file path."},{"ref":"AtomTweaksWeb.Router.Helpers.html#static_url/2","title":"AtomTweaksWeb.Router.Helpers.static_url/2","type":"function","doc":"Generates url to a static asset given its file path."},{"ref":"AtomTweaksWeb.Router.Helpers.html#tweak_fork_path/3","title":"AtomTweaksWeb.Router.Helpers.tweak_fork_path/3","type":"function","doc":""},{"ref":"AtomTweaksWeb.Router.Helpers.html#tweak_fork_path/4","title":"AtomTweaksWeb.Router.Helpers.tweak_fork_path/4","type":"function","doc":""},{"ref":"AtomTweaksWeb.Router.Helpers.html#tweak_fork_url/3","title":"AtomTweaksWeb.Router.Helpers.tweak_fork_url/3","type":"function","doc":""},{"ref":"AtomTweaksWeb.Router.Helpers.html#tweak_fork_url/4","title":"AtomTweaksWeb.Router.Helpers.tweak_fork_url/4","type":"function","doc":""},{"ref":"AtomTweaksWeb.Router.Helpers.html#tweak_path/2","title":"AtomTweaksWeb.Router.Helpers.tweak_path/2","type":"function","doc":""},{"ref":"AtomTweaksWeb.Router.Helpers.html#tweak_path/3","title":"AtomTweaksWeb.Router.Helpers.tweak_path/3","type":"function","doc":""},{"ref":"AtomTweaksWeb.Router.Helpers.html#tweak_path/4","title":"AtomTweaksWeb.Router.Helpers.tweak_path/4","type":"function","doc":""},{"ref":"AtomTweaksWeb.Router.Helpers.html#tweak_star_path/3","title":"AtomTweaksWeb.Router.Helpers.tweak_star_path/3","type":"function","doc":""},{"ref":"AtomTweaksWeb.Router.Helpers.html#tweak_star_path/4","title":"AtomTweaksWeb.Router.Helpers.tweak_star_path/4","type":"function","doc":""},{"ref":"AtomTweaksWeb.Router.Helpers.html#tweak_star_url/3","title":"AtomTweaksWeb.Router.Helpers.tweak_star_url/3","type":"function","doc":""},{"ref":"AtomTweaksWeb.Router.Helpers.html#tweak_star_url/4","title":"AtomTweaksWeb.Router.Helpers.tweak_star_url/4","type":"function","doc":""},{"ref":"AtomTweaksWeb.Router.Helpers.html#tweak_stargazer_path/3","title":"AtomTweaksWeb.Router.Helpers.tweak_stargazer_path/3","type":"function","doc":""},{"ref":"AtomTweaksWeb.Router.Helpers.html#tweak_stargazer_path/4","title":"AtomTweaksWeb.Router.Helpers.tweak_stargazer_path/4","type":"function","doc":""},{"ref":"AtomTweaksWeb.Router.Helpers.html#tweak_stargazer_url/3","title":"AtomTweaksWeb.Router.Helpers.tweak_stargazer_url/3","type":"function","doc":""},{"ref":"AtomTweaksWeb.Router.Helpers.html#tweak_stargazer_url/4","title":"AtomTweaksWeb.Router.Helpers.tweak_stargazer_url/4","type":"function","doc":""},{"ref":"AtomTweaksWeb.Router.Helpers.html#tweak_url/2","title":"AtomTweaksWeb.Router.Helpers.tweak_url/2","type":"function","doc":""},{"ref":"AtomTweaksWeb.Router.Helpers.html#tweak_url/3","title":"AtomTweaksWeb.Router.Helpers.tweak_url/3","type":"function","doc":""},{"ref":"AtomTweaksWeb.Router.Helpers.html#tweak_url/4","title":"AtomTweaksWeb.Router.Helpers.tweak_url/4","type":"function","doc":""},{"ref":"AtomTweaksWeb.Router.Helpers.html#url/1","title":"AtomTweaksWeb.Router.Helpers.url/1","type":"function","doc":"Generates the connection/endpoint base URL without any path information."},{"ref":"AtomTweaksWeb.Router.Helpers.html#user_path/3","title":"AtomTweaksWeb.Router.Helpers.user_path/3","type":"function","doc":""},{"ref":"AtomTweaksWeb.Router.Helpers.html#user_path/4","title":"AtomTweaksWeb.Router.Helpers.user_path/4","type":"function","doc":""},{"ref":"AtomTweaksWeb.Router.Helpers.html#user_star_path/3","title":"AtomTweaksWeb.Router.Helpers.user_star_path/3","type":"function","doc":""},{"ref":"AtomTweaksWeb.Router.Helpers.html#user_star_path/4","title":"AtomTweaksWeb.Router.Helpers.user_star_path/4","type":"function","doc":""},{"ref":"AtomTweaksWeb.Router.Helpers.html#user_star_url/3","title":"AtomTweaksWeb.Router.Helpers.user_star_url/3","type":"function","doc":""},{"ref":"AtomTweaksWeb.Router.Helpers.html#user_star_url/4","title":"AtomTweaksWeb.Router.Helpers.user_star_url/4","type":"function","doc":""},{"ref":"AtomTweaksWeb.Router.Helpers.html#user_token_path/3","title":"AtomTweaksWeb.Router.Helpers.user_token_path/3","type":"function","doc":""},{"ref":"AtomTweaksWeb.Router.Helpers.html#user_token_path/4","title":"AtomTweaksWeb.Router.Helpers.user_token_path/4","type":"function","doc":""},{"ref":"AtomTweaksWeb.Router.Helpers.html#user_token_path/5","title":"AtomTweaksWeb.Router.Helpers.user_token_path/5","type":"function","doc":""},{"ref":"AtomTweaksWeb.Router.Helpers.html#user_token_url/3","title":"AtomTweaksWeb.Router.Helpers.user_token_url/3","type":"function","doc":""},{"ref":"AtomTweaksWeb.Router.Helpers.html#user_token_url/4","title":"AtomTweaksWeb.Router.Helpers.user_token_url/4","type":"function","doc":""},{"ref":"AtomTweaksWeb.Router.Helpers.html#user_token_url/5","title":"AtomTweaksWeb.Router.Helpers.user_token_url/5","type":"function","doc":""},{"ref":"AtomTweaksWeb.Router.Helpers.html#user_url/3","title":"AtomTweaksWeb.Router.Helpers.user_url/3","type":"function","doc":""},{"ref":"AtomTweaksWeb.Router.Helpers.html#user_url/4","title":"AtomTweaksWeb.Router.Helpers.user_url/4","type":"function","doc":""},{"ref":"AtomTweaksWeb.TimeHelpers.html","title":"AtomTweaksWeb.TimeHelpers","type":"module","doc":"View helper functions for displaying time information."},{"ref":"AtomTweaksWeb.TimeHelpers.html#relative_time/1","title":"AtomTweaksWeb.TimeHelpers.relative_time/1","type":"function","doc":"Renders the time-ago element formatted to display the relative time between now and from. Also includes the title attribute containing the ISO 8601-formatted timestamp that will be displayed on hover for people wanting to see the exact time instead of the approximation."},{"ref":"AtomTweaksWeb.Gettext.html","title":"AtomTweaksWeb.Gettext","type":"module","doc":"A module providing Internationalization with a gettext-based API. By using Gettext, your module gains a set of macros for translations, for example: import AtomTweaks.Gettext # Simple translation gettext &quot;Here is the string to translate&quot; # Plural translation ngettext &quot;Here is the string to translate&quot;, &quot;Here are the strings to translate&quot;, 3 # Domain-based translation dgettext &quot;errors&quot;, &quot;Here is the error message to translate&quot; See the Gettext Docs for detailed usage."},{"ref":"AtomTweaksWeb.Gettext.html#dgettext/3","title":"AtomTweaksWeb.Gettext.dgettext/3","type":"macro","doc":""},{"ref":"AtomTweaksWeb.Gettext.html#dgettext_noop/2","title":"AtomTweaksWeb.Gettext.dgettext_noop/2","type":"macro","doc":""},{"ref":"AtomTweaksWeb.Gettext.html#dngettext/5","title":"AtomTweaksWeb.Gettext.dngettext/5","type":"macro","doc":""},{"ref":"AtomTweaksWeb.Gettext.html#dngettext_noop/3","title":"AtomTweaksWeb.Gettext.dngettext_noop/3","type":"macro","doc":""},{"ref":"AtomTweaksWeb.Gettext.html#gettext/2","title":"AtomTweaksWeb.Gettext.gettext/2","type":"macro","doc":""},{"ref":"AtomTweaksWeb.Gettext.html#gettext_comment/1","title":"AtomTweaksWeb.Gettext.gettext_comment/1","type":"macro","doc":""},{"ref":"AtomTweaksWeb.Gettext.html#gettext_noop/1","title":"AtomTweaksWeb.Gettext.gettext_noop/1","type":"macro","doc":""},{"ref":"AtomTweaksWeb.Gettext.html#handle_missing_bindings/2","title":"AtomTweaksWeb.Gettext.handle_missing_bindings/2","type":"function","doc":"Default handling for missing bindings. This function is called when there are missing bindings in a translation. It takes a Gettext.MissingBindingsError struct and the translation with the wrong bindings left as is with the %{} syntax. For example, if something like this is called: MyApp.Gettext.gettext(&quot;Hello %{name}, welcome to %{country}&quot;, name: &quot;Jane&quot;, country: &quot;Italy&quot;) and our it/LC_MESSAGES/default.po looks like this: msgid &quot;Hello %{name}, welcome to %{country}&quot; msgstr &quot;Ciao %{name}, benvenuto in %{cowntry}&quot; # (typo) then Gettext will call: MyApp.Gettext.handle_missing_bindings(exception, &quot;Ciao Jane, benvenuto in %{cowntry}&quot;) where exception is a struct that looks like this: %Gettext.MissingBindingsError{ backend: MyApp.Gettext, domain: &quot;default&quot;, locale: &quot;it&quot;, msgid: &quot;Hello %{name}, welcome to %{country}&quot;, bindings: [:country], } The return value of the c:handle_missing_bindings/2 callback is used as the translated string that the translation macros and functions return. The default implementation for this function uses Logger.error/1 to warn about the missing binding and returns the translated message with the incomplete bindings. This function can be overridden. For example, to raise when there are missing bindings: def handle_missing_bindings(exception, _incomplete) do raise exception end Callback implementation for Gettext.Backend.handle_missing_bindings/2."},{"ref":"AtomTweaksWeb.Gettext.html#handle_missing_plural_translation/6","title":"AtomTweaksWeb.Gettext.handle_missing_plural_translation/6","type":"function","doc":"Default handling for plural translations with a missing translation. Same as c:handle_missing_translation/4, but for plural translations. In this case, n is the number used for pluralizing the translated string. Callback implementation for Gettext.Backend.handle_missing_plural_translation/6."},{"ref":"AtomTweaksWeb.Gettext.html#handle_missing_translation/4","title":"AtomTweaksWeb.Gettext.handle_missing_translation/4","type":"function","doc":"Default handling for translations with a missing translation. When a Gettext function/macro is called with a string to translate into a locale but that locale doesn&#39;t provide a translation for that string, this callback is invoked. msgid is the string that Gettext tried to translate. This function should return {:ok, translated} if a translation can be fetched or constructed for the given string, or {:default, msgid} otherwise. Callback implementation for Gettext.Backend.handle_missing_translation/4."},{"ref":"AtomTweaksWeb.Gettext.html#lgettext/4","title":"AtomTweaksWeb.Gettext.lgettext/4","type":"function","doc":""},{"ref":"AtomTweaksWeb.Gettext.html#lngettext/6","title":"AtomTweaksWeb.Gettext.lngettext/6","type":"function","doc":""},{"ref":"AtomTweaksWeb.Gettext.html#md/1","title":"AtomTweaksWeb.Gettext.md/1","type":"function","doc":"Render the output of a gettext macro into HTML from Markdown."},{"ref":"AtomTweaksWeb.Gettext.html#ngettext/4","title":"AtomTweaksWeb.Gettext.ngettext/4","type":"macro","doc":""},{"ref":"AtomTweaksWeb.Gettext.html#ngettext_noop/2","title":"AtomTweaksWeb.Gettext.ngettext_noop/2","type":"macro","doc":""},{"ref":"AtomTweaks.Markdown.html","title":"AtomTweaks.Markdown","type":"module","doc":"A structure that represents a chunk of Markdown text in memory. For the database type, see AtomTweaks.Ecto.Markdown instead. The structure contains both the raw Markdown text and, potentially, the rendered html. Upon a request to render the structure using either to_html/1 or to_iodata/1, the html field is given preference and returned unchanged, if available. If the html value is nil, then the contents of the text field are rendered using AtomTweaksWeb.MarkdownEngine.render/1 and returned. This type requires special handling in forms because Phoenix&#39;s form builder functions call Phoenix.HTML.html_escape/1 on all field values, which returns the html field on this type. But what we want when we show an AtomTweaks.Markdown value in a form is the text field."},{"ref":"AtomTweaks.Markdown.html#to_html/1","title":"AtomTweaks.Markdown.to_html/1","type":"function","doc":"Renders the supplied Markdown as HTML. Examples Render Markdown from a string: iex&gt; AtomTweaks.Markdown.to_html(&quot;# Foo&quot;) &quot;&lt;h1&gt;Foo&lt;/h1&gt; &quot; Render Markdown from an unrendered Markdown struct: iex&gt; AtomTweaks.Markdown.to_html(%AtomTweaks.Markdown{text: &quot;# Foo&quot;}) &quot;&lt;h1&gt;Foo&lt;/h1&gt; &quot; Passes already rendered Markdown through unchanged: iex&gt; AtomTweaks.Markdown.to_html(%AtomTweaks.Markdown{html: &quot;&lt;p&gt;foo&lt;/p&gt;&quot;}) &quot;&lt;p&gt;foo&lt;/p&gt;&quot; Returns an empty string for anything that isn&#39;t a string or a Markdown struct: iex&gt; AtomTweaks.Markdown.to_html(5) &quot;&quot;"},{"ref":"AtomTweaks.Markdown.html#to_iodata/1","title":"AtomTweaks.Markdown.to_iodata/1","type":"function","doc":"Renders a chunk of Markdown to its iodata representation."},{"ref":"AtomTweaks.Markdown.html#t:markdown/0","title":"AtomTweaks.Markdown.markdown/0","type":"type","doc":"An AtomTweaks.Markdown struct or a string of Markdown text."},{"ref":"AtomTweaks.Markdown.html#t:t/0","title":"AtomTweaks.Markdown.t/0","type":"type","doc":""},{"ref":"AtomTweaksWeb.MarkdownEngine.html","title":"AtomTweaksWeb.MarkdownEngine","type":"module","doc":"Renders Markdown into HTML. Besides using CommonMark to render Markdown into HTML, it also links at-mentions to user profile pages."},{"ref":"AtomTweaksWeb.MarkdownEngine.html#render/1","title":"AtomTweaksWeb.MarkdownEngine.render/1","type":"function","doc":"Renders the given Markdown text into HTML with the default set of options."},{"ref":"AtomTweaksWeb.MarkdownEngine.html#render/2","title":"AtomTweaksWeb.MarkdownEngine.render/2","type":"function","doc":"Renders the given Markdown text into HTML according to options. See: Cmark.to_html/2 Options Currently, the :safe, :smart, and :validate_utf8 options are hard-coded. All supplied options are ignored."},{"ref":"AtomTweaksWeb.GitHub.html","title":"AtomTweaksWeb.GitHub","type":"module","doc":"An OAuth2 strategy for GitHub."},{"ref":"AtomTweaksWeb.GitHub.html#authorize_url/2","title":"AtomTweaksWeb.GitHub.authorize_url/2","type":"function","doc":"Builds the URL to the authorization endpoint. Example def authorize_url(client, params) do client |&gt; put_param(:response_type, &quot;code&quot;) |&gt; put_param(:client_id, client.client_id) |&gt; put_param(:redirect_uri, client.redirect_uri) |&gt; merge_params(params) end Callback implementation for OAuth2.Strategy.authorize_url/2."},{"ref":"AtomTweaksWeb.GitHub.html#authorize_url!/1","title":"AtomTweaksWeb.GitHub.authorize_url!/1","type":"function","doc":""},{"ref":"AtomTweaksWeb.GitHub.html#client/0","title":"AtomTweaksWeb.GitHub.client/0","type":"function","doc":""},{"ref":"AtomTweaksWeb.GitHub.html#get_token/3","title":"AtomTweaksWeb.GitHub.get_token/3","type":"function","doc":"Builds the URL to the token endpoint. Example def get_token(client, params, headers) do client |&gt; put_param(:code, params[:code]) |&gt; put_param(:grant_type, &quot;authorization_code&quot;) |&gt; put_param(:client_id, client.client_id) |&gt; put_param(:client_secret, client.client_secret) |&gt; put_param(:redirect_uri, client.redirect_uri) |&gt; merge_params(params) |&gt; put_headers(headers) end Callback implementation for OAuth2.Strategy.get_token/3."},{"ref":"AtomTweaksWeb.GitHub.html#get_token!/3","title":"AtomTweaksWeb.GitHub.get_token!/3","type":"function","doc":""},{"ref":"AtomTweaksWeb.HerokuMetadata.html","title":"AtomTweaksWeb.HerokuMetadata","type":"module","doc":"A Plug that adds Heroku metadata to the metadata to be rendered on the page via the PageMetadata system."},{"ref":"AtomTweaksWeb.HerokuMetadata.html#call/2","title":"AtomTweaksWeb.HerokuMetadata.call/2","type":"function","doc":"Adds the configured Heroku metadata to the page."},{"ref":"AtomTweaksWeb.HerokuMetadata.html#get/1","title":"AtomTweaksWeb.HerokuMetadata.get/1","type":"function","doc":""},{"ref":"AtomTweaksWeb.HerokuMetadata.html#init/1","title":"AtomTweaksWeb.HerokuMetadata.init/1","type":"function","doc":"Initialize the plug. When given no options, the full set of Heroku environment variables are applied as metadata: HEROKU_APP_ID HEROKU_APP_NAME HEROKU_DYNO_ID HEROKU_RELEASE_CREATED_AT HEROKU_RELEASE_VERSION HEROKU_SLUG_COMMIT HEROKU_SLUG_DESCRIPTION See the Heroku documentation for what each one means. Options The options are mutually exclusive: :except - Will include all environment variables except those listed :only - Will only include the listed environment variables"},{"ref":"AtomTweaksWeb.PageMetadata.html","title":"AtomTweaksWeb.PageMetadata","type":"module","doc":"A system for easily setting metadata for the page before it is rendered. If you assign some metadata to the page before it is rendered: iex&gt; PageMetadata.add(conn, foo: &quot;bar&quot;) iex&gt; hd(conn.assigns.page_metadata) [foo: &quot;bar&quot;] And add the PageMetadata.render/1 call to the head section of the layout template: &lt;%= PageMetadata.render(@conn) %&gt; It will show up in the rendered page: &lt;html&gt; &lt;head&gt; &lt;meta foo=&quot;bar&quot;&gt; &lt;/head&gt; &lt;body&gt; &lt;/body&gt; &lt;/html&gt;"},{"ref":"AtomTweaksWeb.PageMetadata.html#add/2","title":"AtomTweaksWeb.PageMetadata.add/2","type":"function","doc":"Adds metadata to the page. The metadata for any type that implements the AtomTweaksWeb.PageMetadata.Metadata protocol can be added to a page."},{"ref":"AtomTweaksWeb.PageMetadata.html#render/1","title":"AtomTweaksWeb.PageMetadata.render/1","type":"function","doc":"Renders the metadata for the page, if it was set. It renders each item of metadata as an individual meta tag. This function should be called in the head section of the page layout template, typically app_name_web/templates/layout/app.html.eex."},{"ref":"AtomTweaksWeb.PageMetadata.Metadata.html","title":"AtomTweaksWeb.PageMetadata.Metadata","type":"protocol","doc":"Defines the metadata protocol. To define an implementation for this protocol for a type, one must return a representation of that type as an item or list of metadata. A single item of metadata is a keyword list of attribute/value pairs intended to be rendered on an HTML meta tag. Multiple items of metadata can be returned as a list of keyword lists. Examples The metadatum: [property: &quot;og:title&quot;, content: &quot;Some title&quot;] becomes the HTML: &lt;meta property=&quot;og:title&quot; content=&quot;Some title&quot; /&gt; The metadata: [ [property: &quot;og:title&quot;, content: &quot;Some title&quot;], [property: &quot;og:description&quot;, content: &quot;A much longer description&quot;] ] becomes the HTML: &lt;meta property=&quot;og:title&quot; content=&quot;Some title&quot; /&gt; &lt;meta property=&quot;og:description&quot; content=&quot;A much longer description&quot; /&gt;"},{"ref":"AtomTweaksWeb.PageMetadata.Metadata.html#to_metadata/1","title":"AtomTweaksWeb.PageMetadata.Metadata.to_metadata/1","type":"function","doc":"Gets the page metadata for record."},{"ref":"AtomTweaksWeb.PageMetadata.Metadata.html#t:t/0","title":"AtomTweaksWeb.PageMetadata.Metadata.t/0","type":"type","doc":""},{"ref":"AtomTweaksWeb.SlidingSessionTimeout.html","title":"AtomTweaksWeb.SlidingSessionTimeout","type":"module","doc":"Times out the session after a period of inactivity. The default timeout is one hour. This can be configured in the application config where the timeout is given as a number of seconds. config :my_app, AtomTweaks.SlidingSessionTimeout, timeout: 1_234"},{"ref":"AtomTweaksWeb.SlidingSessionTimeout.html#call/2","title":"AtomTweaksWeb.SlidingSessionTimeout.call/2","type":"function","doc":""},{"ref":"AtomTweaksWeb.SlidingSessionTimeout.html#init/0","title":"AtomTweaksWeb.SlidingSessionTimeout.init/0","type":"function","doc":""},{"ref":"AtomTweaksWeb.SlidingSessionTimeout.html#init/1","title":"AtomTweaksWeb.SlidingSessionTimeout.init/1","type":"function","doc":""},{"ref":"AtomTweaksWeb.TokenAuthentication.html","title":"AtomTweaksWeb.TokenAuthentication","type":"module","doc":"A Plug that authenticates an API connection based on the contents of the authorization header. The plug retrieves a Phoenix.Token-generated code from the authorization request header. If that code resolves to a valid AtomTweaks.Accounts.Token, then the token is stored in the connection assigns under the :auth_token key. It expects the header to be of the format: authorization: token [gigantically long token here] Keep in mind that HTTP header keys are case-insensitive. Otherwise, if the header is missing or malformatted, a 401 Unauthorized response is returned. If the header is present and properly formatted, but the code does not resolve to a valid token, then a 403 Forbidden response is returned. This only authenticates the connection, ensuring that it has a valid AtomTweaks.Accounts.Token. Each individual controller must ensure that the token contains the proper authorization to perform the action that is being requested. See AtomTweaksWeb.ApiHelpers.authorize/2 for more details. Examples pipeline :api do plug(:accepts, [&quot;json&quot;]) plug(AtomTweaksWeb.TokenAuthentication) end"},{"ref":"AtomTweaksWeb.PrimerHelpers.MissingConfigurationError.html","title":"AtomTweaksWeb.PrimerHelpers.MissingConfigurationError","type":"exception","doc":"Exception raised when there is an element of required application configuration missing."},{"ref":"AtomTweaksWeb.PrimerHelpers.MissingConfigurationError.html#message/1","title":"AtomTweaksWeb.PrimerHelpers.MissingConfigurationError.message/1","type":"function","doc":"Callback implementation for Exception.message/1."},{"ref":"AtomTweaks.Releases.html","title":"AtomTweaks.Releases","type":"module","doc":"Operations on and with releases."},{"ref":"AtomTweaks.Releases.html#change_note/1","title":"AtomTweaks.Releases.change_note/1","type":"function","doc":"Returns an %Ecto.Changeset{} for tracking note changes. Examples iex&gt; change_note(note) %Ecto.Changeset{source: %Note{}}"},{"ref":"AtomTweaks.Releases.html#create_note/1","title":"AtomTweaks.Releases.create_note/1","type":"function","doc":"Creates a note. Examples iex&gt; create_note(%{field: value}) {:ok, %Note{}} iex&gt; create_note(%{field: bad_value}) {:error, %Ecto.Changeset{}}"},{"ref":"AtomTweaks.Releases.html#delete_note/1","title":"AtomTweaks.Releases.delete_note/1","type":"function","doc":"Deletes a Note. Examples iex&gt; delete_note(note) {:ok, %Note{}} iex&gt; delete_note(note) {:error, %Ecto.Changeset{}}"},{"ref":"AtomTweaks.Releases.html#get_note!/1","title":"AtomTweaks.Releases.get_note!/1","type":"function","doc":"Gets a single note. Raises Ecto.NoResultsError if the Note does not exist. Examples iex&gt; get_note!(123) %Note{} iex&gt; get_note!(456) ** (Ecto.NoResultsError)"},{"ref":"AtomTweaks.Releases.html#list_notes/1","title":"AtomTweaks.Releases.list_notes/1","type":"function","doc":"Returns the list of notes. Options :order_by -- Passed to Ecto.Query.order_by/3 Examples List release notes with newest first: iex&gt; list_notes() [%Note{}, ...]"},{"ref":"AtomTweaks.Releases.html#update_note/2","title":"AtomTweaks.Releases.update_note/2","type":"function","doc":"Updates a note. Examples iex&gt; update_note(note, %{field: new_value}) {:ok, %Note{}} iex&gt; update_note(note, %{field: bad_value}) {:error, %Ecto.Changeset{}}"},{"ref":"AtomTweaks.Releases.Note.html","title":"AtomTweaks.Releases.Note","type":"module","doc":"Represents a release note record. Fields description - Markdown text of the note detail_url - URL of where to get more details title - Title of the release note"},{"ref":"AtomTweaksWeb.UserSocket.html","title":"AtomTweaksWeb.UserSocket","type":"module","doc":""},{"ref":"AtomTweaksWeb.UserSocket.html#connect/2","title":"AtomTweaksWeb.UserSocket.connect/2","type":"function","doc":"Receives the socket params and authenticates the connection. Socket params and assigns Socket params are passed from the client and can be used to verify and authenticate a user. After verification, you can put default assigns into the socket that will be set for all channels, ie {:ok, assign(socket, :user_id, verified_user_id)} To deny connection, return :error. See Phoenix.Token documentation for examples in performing token verification on connect. Callback implementation for Phoenix.Socket.connect/2."},{"ref":"AtomTweaksWeb.UserSocket.html#id/1","title":"AtomTweaksWeb.UserSocket.id/1","type":"function","doc":"Identifies the socket connection. Socket IDs are topics that allow you to identify all sockets for a given user: def id(socket), do: &quot;users_socket:\#{socket.assigns.user_id}&quot; Would allow you to broadcast a &quot;disconnect&quot; event and terminate all active sockets and channels for a given user: MyApp.Endpoint.broadcast(&quot;users_socket:&quot; &lt;&gt; user.id, &quot;disconnect&quot;, %{}) Returning nil makes this socket anonymous. Callback implementation for Phoenix.Socket.id/1."},{"ref":"AtomTweaks.DataCase.html","title":"AtomTweaks.DataCase","type":"module","doc":"This module defines the setup for tests requiring access to the application&#39;s data layer. You may define functions here to be used as helpers in your tests. Finally, if the test case interacts with the database, it cannot be async. For this reason, every test runs inside a transaction which is reset at the beginning of the test unless the test case is marked as async."},{"ref":"AtomTweaks.DataCase.html#errors_on/1","title":"AtomTweaks.DataCase.errors_on/1","type":"function","doc":"Transforms changeset errors into a map of messages. Examples assert {:error, changeset} = Accounts.create_user(%{password: &quot;short&quot;}) assert &quot;password is too short&quot; in errors_on(changeset).password assert %{password: [&quot;password is too short&quot;]} = errors_on(changeset)"},{"ref":"AtomTweaks.DataCase.html#errors_on/2","title":"AtomTweaks.DataCase.errors_on/2","type":"function","doc":"Returns the list of errors on field in the changeset. Examples assert &quot;password is too short&quot; in errors_on(changeset, :password)"},{"ref":"AtomTweaks.Factory.html","title":"AtomTweaks.Factory","type":"module","doc":"Factories for generating fake database records."},{"ref":"AtomTweaks.Factory.html#build/2","title":"AtomTweaks.Factory.build/2","type":"function","doc":""},{"ref":"AtomTweaks.Factory.html#build_list/3","title":"AtomTweaks.Factory.build_list/3","type":"function","doc":""},{"ref":"AtomTweaks.Factory.html#build_pair/2","title":"AtomTweaks.Factory.build_pair/2","type":"function","doc":""},{"ref":"AtomTweaks.Factory.html#create/1","title":"AtomTweaks.Factory.create/1","type":"function","doc":""},{"ref":"AtomTweaks.Factory.html#create/2","title":"AtomTweaks.Factory.create/2","type":"function","doc":""},{"ref":"AtomTweaks.Factory.html#create_list/3","title":"AtomTweaks.Factory.create_list/3","type":"function","doc":""},{"ref":"AtomTweaks.Factory.html#create_pair/2","title":"AtomTweaks.Factory.create_pair/2","type":"function","doc":""},{"ref":"AtomTweaks.Factory.html#factory/1","title":"AtomTweaks.Factory.factory/1","type":"function","doc":"Raises a helpful error if no factory is defined."},{"ref":"AtomTweaks.Factory.html#insert/1","title":"AtomTweaks.Factory.insert/1","type":"function","doc":""},{"ref":"AtomTweaks.Factory.html#insert/2","title":"AtomTweaks.Factory.insert/2","type":"function","doc":""},{"ref":"AtomTweaks.Factory.html#insert_list/3","title":"AtomTweaks.Factory.insert_list/3","type":"function","doc":""},{"ref":"AtomTweaks.Factory.html#insert_pair/2","title":"AtomTweaks.Factory.insert_pair/2","type":"function","doc":""},{"ref":"AtomTweaks.Factory.html#json_params_for/2","title":"AtomTweaks.Factory.json_params_for/2","type":"function","doc":"For when you need params for a given record to supply to an API."},{"ref":"AtomTweaks.Factory.html#note_factory/0","title":"AtomTweaks.Factory.note_factory/0","type":"function","doc":"Generates realistic-looking AtomTweaks.Releases.Note records."},{"ref":"AtomTweaks.Factory.html#params_for/2","title":"AtomTweaks.Factory.params_for/2","type":"function","doc":""},{"ref":"AtomTweaks.Factory.html#params_with_assocs/2","title":"AtomTweaks.Factory.params_with_assocs/2","type":"function","doc":""},{"ref":"AtomTweaks.Factory.html#string_params_for/2","title":"AtomTweaks.Factory.string_params_for/2","type":"function","doc":""},{"ref":"AtomTweaks.Factory.html#string_params_with_assocs/2","title":"AtomTweaks.Factory.string_params_with_assocs/2","type":"function","doc":""},{"ref":"AtomTweaks.Factory.html#token_factory/0","title":"AtomTweaks.Factory.token_factory/0","type":"function","doc":"Generates realistic-looking AtomTweaks.Accounts.Token records."},{"ref":"AtomTweaks.Factory.html#tweak_factory/0","title":"AtomTweaks.Factory.tweak_factory/0","type":"function","doc":"Generates realistic-looking AtomTweaks.Tweaks.Tweak records."},{"ref":"AtomTweaks.Factory.html#user_factory/0","title":"AtomTweaks.Factory.user_factory/0","type":"function","doc":"Generates realistic-looking AtomTweaks.Accounts.User records."},{"ref":"AtomTweaksWeb.ApiCase.html","title":"AtomTweaksWeb.ApiCase","type":"module","doc":"This module defines the test case to be used by tests that require setting up a connection for an API. Such tests rely on Phoenix.ConnTest and also import other functionality to make it easier to build common datastructures and query the data layer. Finally, if the test case interacts with the database, it cannot be async. For this reason, every test runs inside a transaction which is reset at the beginning of the test unless the test case is marked as async."},{"ref":"AtomTweaksWeb.ChannelCase.html","title":"AtomTweaksWeb.ChannelCase","type":"module","doc":"This module defines the test case to be used by channel tests. Such tests rely on Phoenix.ChannelTest and also import other functionality to make it easier to build common datastructures and query the data layer. Finally, if the test case interacts with the database, it cannot be async. For this reason, every test runs inside a transaction which is reset at the beginning of the test unless the test case is marked as async."},{"ref":"AtomTweaksWeb.ConnCase.html","title":"AtomTweaksWeb.ConnCase","type":"module","doc":"This module defines the test case to be used by tests that require setting up a connection. Such tests rely on Phoenix.ConnTest and also import other functionality to make it easier to build common datastructures and query the data layer. Finally, if the test case interacts with the database, it cannot be async. For this reason, every test runs inside a transaction which is reset at the beginning of the test unless the test case is marked as async."},{"ref":"AtomTweaksWeb.HelperCase.html","title":"AtomTweaksWeb.HelperCase","type":"module","doc":"This module defines the test case to be used by tests of view helper functions."},{"ref":"AtomTweaksWeb.Shared.FooterTests.html","title":"AtomTweaksWeb.Shared.FooterTests","type":"module","doc":"Shared tests for the common page footer. Examples use AtomTweaksWeb.Shared.FooterTests"},{"ref":"AtomTweaksWeb.Shared.HeaderTests.html","title":"AtomTweaksWeb.Shared.HeaderTests","type":"module","doc":"Shared tests for the common page header. Examples When testing the page when logged in: use AtomTweaksWeb.Shared.HeaderTests, logged_in: true When testing the page logged out: use AtomTweaksWeb.Shared.HeaderTests. logged_in: false"},{"ref":"AtomTweaksWeb.Shared.UserInfoTests.html","title":"AtomTweaksWeb.Shared.UserInfoTests","type":"module","doc":"Shared tests for the user info block on user pages. Examples use AtomTweaksWeb.Shared.UserInfoTests"},{"ref":"Support.Changeset.html","title":"Support.Changeset","type":"module","doc":"Functions for testing Ecto.Changeset values."},{"ref":"Support.Changeset.html#error_messages/2","title":"Support.Changeset.error_messages/2","type":"function","doc":"Retrieves the error messages associated with field from changeset. Use error_on?/2 first to determine there are errors on the expected field."},{"ref":"Support.Changeset.html#error_on?/2","title":"Support.Changeset.error_on?/2","type":"function","doc":"Determines if the field in changeset has an error."},{"ref":"Support.Conn.html","title":"Support.Conn","type":"module","doc":"Functions for testing Plug.Conn values."},{"ref":"Support.Conn.html#fetch_assign/2","title":"Support.Conn.fetch_assign/2","type":"function","doc":"Fetches the value for key from the t:Plug.Conn/0 assigns."},{"ref":"Support.Fixture.html","title":"Support.Fixture","type":"module","doc":"Functions for handling test fixtures."},{"ref":"Support.Fixture.html#fixture/1","title":"Support.Fixture.fixture/1","type":"function","doc":"Gets the contents of the fixture at the path within the fixture directory. If the extension of the file is: .exs - It is evaluated as Elixir code and the resulting value is returned Anything else is returned as a string"},{"ref":"Support.Fixture.html#fixture_path/0","title":"Support.Fixture.fixture_path/0","type":"function","doc":"Returns the root absolute path for fixtures."},{"ref":"Support.Fixture.html#fixture_path/1","title":"Support.Fixture.fixture_path/1","type":"function","doc":"Returns the absolute path for the given fixture path. If the file name has no extension, it is assumed to be .exs."},{"ref":"Support.HTML.html","title":"Support.HTML","type":"module","doc":"Test support functions for working with HTML."},{"ref":"Support.HTML.html#has_selector?/2","title":"Support.HTML.has_selector?/2","type":"function","doc":""},{"ref":"Support.HTML.html#html/1","title":"Support.HTML.html/1","type":"function","doc":"Returns the HTML version of the structure. Accepts either Floki.html_tree or AtomTweaks.Markdown.t."},{"ref":"Support.HTML.html#inner_html/1","title":"Support.HTML.inner_html/1","type":"function","doc":"Returns the inner HTML of the structure."},{"ref":"Support.HTML.html#md/1","title":"Support.HTML.md/1","type":"function","doc":"Returns the Markdown version of the AtomTweaks.Markdown structure."},{"ref":"Support.HTML.html#render/1","title":"Support.HTML.render/1","type":"function","doc":"Renders a Phoenix.HTML.safe object to string."},{"ref":"Support.HTML.html#selected?/1","title":"Support.HTML.selected?/1","type":"function","doc":"Determines whether the menu_item is selected."},{"ref":"Support.Setup.html","title":"Support.Setup","type":"module","doc":"Functions that are designed to be used as chained setup callbacks. Each callback takes certain values from the context state and merges in new or updated values. Because they only get supplied the context as a parameter, each function has a contract around the keys that are used. Categories insert functions create database records request functions navigate to web pages Examples Inserts a user, creates a tweak for that user, and then stars that tweak for that user: setup [:insert_user, :insert_tweak, :insert_star]"},{"ref":"Support.Setup.html#fork_tweak/1","title":"Support.Setup.fork_tweak/1","type":"function","doc":"Forks a tweak. Inputs :tweaks Outputs :fork_user -- User that forked the tweak :fork_tweak -- New fork tweak :forked_tweak -- Tweak that was forked"},{"ref":"Support.Setup.html#insert_init_tweak/1","title":"Support.Setup.insert_init_tweak/1","type":"function","doc":"Inserts an init tweak. Outputs :init_tweak -- Tweak that was created"},{"ref":"Support.Setup.html#insert_release_note/1","title":"Support.Setup.insert_release_note/1","type":"function","doc":"Inserts a release note. Outputs :note -- Release note that was inserted into the database"},{"ref":"Support.Setup.html#insert_site_admin/1","title":"Support.Setup.insert_site_admin/1","type":"function","doc":"Inserts a site admin user into the database. Outputs :user - Site admin user record"},{"ref":"Support.Setup.html#insert_star/1","title":"Support.Setup.insert_star/1","type":"function","doc":"Stars a tweak by a user. Inputs :user - User to star the tweak :tweak - Tweak to be starred Outputs :star - Star record"},{"ref":"Support.Setup.html#insert_style_tweak/1","title":"Support.Setup.insert_style_tweak/1","type":"function","doc":"Inserts a style tweak. Outputs :style_tweak -- Tweak that was created"},{"ref":"Support.Setup.html#insert_tokens/1","title":"Support.Setup.insert_tokens/1","type":"function","doc":""},{"ref":"Support.Setup.html#insert_tweak/1","title":"Support.Setup.insert_tweak/1","type":"function","doc":"Inserts a single tweak for a user. Inputs Inserts a tweak for the first of: :current_user :user Inserts a new user Outputs :tweak - New tweak record :user - User record that created the tweak"},{"ref":"Support.Setup.html#insert_user/1","title":"Support.Setup.insert_user/1","type":"function","doc":"Inserts a user into the database. Outputs :user - New user record"},{"ref":"Support.Setup.html#insert_user_with_tweaks/1","title":"Support.Setup.insert_user_with_tweaks/1","type":"function","doc":"Inserts a user with three tweaks into the database. Outputs :user - New user record :tweaks - New tweak records"},{"ref":"Support.Setup.html#invalid_token_params/1","title":"Support.Setup.invalid_token_params/1","type":"function","doc":""},{"ref":"Support.Setup.html#invalid_tweak_params/1","title":"Support.Setup.invalid_tweak_params/1","type":"function","doc":"Creates an invalid set of parameters for a tweak. Outputs :tweak_params -- Invalid params"},{"ref":"Support.Setup.html#log_in/1","title":"Support.Setup.log_in/1","type":"function","doc":"Logs in as a user. Inputs :conn -- Connection object Logs in as (in priority order): :user Inserts a new user into the database Outputs :current_user - User record used to log in"},{"ref":"Support.Setup.html#request_admin_release_note_edit/1","title":"Support.Setup.request_admin_release_note_edit/1","type":"function","doc":"Requests the admin release note edit page. Inputs :conn -- Connection object :note -- Release note to edit Outputs :conn -- Updated connection object"},{"ref":"Support.Setup.html#request_admin_release_note_index/1","title":"Support.Setup.request_admin_release_note_index/1","type":"function","doc":"Requests the admin release notes index page. Inputs :conn -- Connection object Outputs :conn -- Updated connection object"},{"ref":"Support.Setup.html#request_admin_release_note_new/1","title":"Support.Setup.request_admin_release_note_new/1","type":"function","doc":"Requests the admin release note new page. Inputs :conn -- Connection object Outputs :conn -- Updated connection object"},{"ref":"Support.Setup.html#request_admin_release_note_show/1","title":"Support.Setup.request_admin_release_note_show/1","type":"function","doc":"Requests the admin release note show page. Inputs :conn -- Connection object :note -- Release note to show Outputs :conn -- Updated connection object"},{"ref":"Support.Setup.html#request_create_tweak/1","title":"Support.Setup.request_create_tweak/1","type":"function","doc":"Requests the create tweak page. Inputs :conn -- Connection object :current_user - Currently logged in user record, if any :request_user - User record requesting the page :tweak_params - Parameters to use to create the tweak Outputs :conn - Updated connection object"},{"ref":"Support.Setup.html#request_edit_tweak/1","title":"Support.Setup.request_edit_tweak/1","type":"function","doc":"Requests the edit tweak page. Inputs :conn - Plug.Conn object :tweak - Tweak record to edit Outputs :conn - Plug.Conn object after the page is rendered"},{"ref":"Support.Setup.html#request_forks/1","title":"Support.Setup.request_forks/1","type":"function","doc":""},{"ref":"Support.Setup.html#request_new_tweak/1","title":"Support.Setup.request_new_tweak/1","type":"function","doc":"Requests the new tweak page. Inputs :conn - Plug.Conn object Outputs :conn - Plug.Conn object after the page is rendered"},{"ref":"Support.Setup.html#request_page_about/1","title":"Support.Setup.request_page_about/1","type":"function","doc":"Requests the about page."},{"ref":"Support.Setup.html#request_page_index/1","title":"Support.Setup.request_page_index/1","type":"function","doc":"Requests the home page."},{"ref":"Support.Setup.html#request_page_release_notes/1","title":"Support.Setup.request_page_release_notes/1","type":"function","doc":"Requests the release notes page."},{"ref":"Support.Setup.html#request_show_tweak/1","title":"Support.Setup.request_show_tweak/1","type":"function","doc":"Requests the show tweak page. Inputs :conn - Plug.Conn object :tweak - Tweak record to show Outputs :conn - Plug.Conn object after the page is rendered"},{"ref":"Support.Setup.html#request_show_user/1","title":"Support.Setup.request_show_user/1","type":"function","doc":"Requests the show user page. Inputs :conn - Plug.Conn object :current_user - Currently logged in user record :request_user - User record to show :user - User record to show Outputs :conn - Plug.Conn object after the page is rendered :path - Path that was navigated to"},{"ref":"Support.Setup.html#request_stars/1","title":"Support.Setup.request_stars/1","type":"function","doc":"Navigates to the stars page for a user. Inputs :conn - Plug.Conn object :user - User whose stars we will view Outputs :conn - Updated Plug.Conn object :path - Path that was navigated to"},{"ref":"Support.Setup.html#request_user/1","title":"Support.Setup.request_user/1","type":"function","doc":"Creates a new user in the database to request a page. Outputs :request_user - User record that requests a page"},{"ref":"Support.Setup.html#request_user_token_create/1","title":"Support.Setup.request_user_token_create/1","type":"function","doc":""},{"ref":"Support.Setup.html#request_user_token_index/1","title":"Support.Setup.request_user_token_index/1","type":"function","doc":"Requests the user&#39;s token index page."},{"ref":"Support.Setup.html#request_user_token_new/1","title":"Support.Setup.request_user_token_new/1","type":"function","doc":"Requests the user&#39;s new token page."},{"ref":"Support.Setup.html#valid_token_params/1","title":"Support.Setup.valid_token_params/1","type":"function","doc":"Generates valid token parameters."},{"ref":"Support.Setup.html#valid_tweak_params/1","title":"Support.Setup.valid_tweak_params/1","type":"function","doc":"Generates valid tweak parameters."},{"ref":"Support.TestMetadata.html","title":"Support.TestMetadata","type":"module","doc":"A structure to test the support for the AtomTweaksWeb.PageMetadata.Metadata protocol."},{"ref":"AtomTweaks.Tweaks.html","title":"AtomTweaks.Tweaks","type":"module","doc":"Context for working with tweaks and their operations."},{"ref":"AtomTweaks.Tweaks.html#change_tweak/1","title":"AtomTweaks.Tweaks.change_tweak/1","type":"function","doc":"Creates an Ecto.Changeset for tracking tweak changes."},{"ref":"AtomTweaks.Tweaks.html#count_forks/1","title":"AtomTweaks.Tweaks.count_forks/1","type":"function","doc":"Counts the number of forks of the given tweak. Note: Does not include transitive forks in this number."},{"ref":"AtomTweaks.Tweaks.html#create_tweak/1","title":"AtomTweaks.Tweaks.create_tweak/1","type":"function","doc":"Creates a new tweak."},{"ref":"AtomTweaks.Tweaks.html#fork_tweak/2","title":"AtomTweaks.Tweaks.fork_tweak/2","type":"function","doc":"Forks the tweak by the user. Returns the newly created tweak or an error changeset."},{"ref":"AtomTweaks.Tweaks.html#get_tweak!/1","title":"AtomTweaks.Tweaks.get_tweak!/1","type":"function","doc":"Gets a tweak by ID."},{"ref":"AtomTweaks.Tweaks.html#is_starred?/2","title":"AtomTweaks.Tweaks.is_starred?/2","type":"function","doc":"Checks to see if the given tweak is starred by user."},{"ref":"AtomTweaks.Tweaks.html#list_forks/1","title":"AtomTweaks.Tweaks.list_forks/1","type":"function","doc":"Lists the forks of the given tweak."},{"ref":"AtomTweaks.Tweaks.html#list_stargazers/1","title":"AtomTweaks.Tweaks.list_stargazers/1","type":"function","doc":"Lists the users that have starred the tweak."},{"ref":"AtomTweaks.Tweaks.html#list_tweaks/1","title":"AtomTweaks.Tweaks.list_tweaks/1","type":"function","doc":"Lists the tweaks according to the options. Defaults to listing all original (not forked) tweaks, newest first. Options :for - User whose tweaks to list :forks - When true, includes forked tweaks in the list (default: false) :type - Includes only tweaks of the given type, if nil lists all tweaks (default: nil)"},{"ref":"AtomTweaks.Tweaks.Star.html","title":"AtomTweaks.Tweaks.Star","type":"module","doc":"Represents that a user has marked a tweak as a favorite of theirs. The list of tweaks that a user has starred is called their &quot;stars&quot;. The list of users that have starred a specific tweak is called the tweak&#39;s &quot;stargazers&quot;. Fields None. This record is used as a many-to-many relationship between users and tweaks. Associations user - The AtomTweaks.Accounts.User who starred the tweak tweak - The AtomTweaks.Tweaks.Tweak that was starred"},{"ref":"AtomTweaks.Tweaks.Star.html#t:t/0","title":"AtomTweaks.Tweaks.Star.t/0","type":"type","doc":""},{"ref":"AtomTweaks.Tweaks.Tweak.html","title":"AtomTweaks.Tweaks.Tweak","type":"module","doc":"Represents a tweak. Fields code - Source code of the tweak description - Markdown description of what the tweak does title - Title of the tweak type - The type of the tweak Associations Must be preloaded before they can be used. forked_from - The AtomTweaks.Tweaks.Tweak this tweak was forked from forks - The AtomTweaks.Tweaks.Tweak records that have been forked from this tweak stargazers - The AtomTweaks.Accounts.User records that have starred this tweak user - The AtomTweaks.Accounts.User that created or forked this tweak"},{"ref":"AtomTweaks.Tweaks.Tweak.html#filter_by_type/2","title":"AtomTweaks.Tweaks.Tweak.filter_by_type/2","type":"function","doc":"Filters query to include only tweaks of type. If nil is given for the type, the query is not filtered. This allows for easily building the query in a pipeline."},{"ref":"AtomTweaks.Tweaks.Tweak.html#filter_by_user/2","title":"AtomTweaks.Tweaks.Tweak.filter_by_user/2","type":"function","doc":"Filters query to include only tweaks that were created by user. If nil is given for the user, the query is not filtered. This allows for easily building the query in a pipeline."},{"ref":"AtomTweaks.Tweaks.Tweak.html#fork_params/2","title":"AtomTweaks.Tweaks.Tweak.fork_params/2","type":"function","doc":""},{"ref":"AtomTweaks.Tweaks.Tweak.html#include_forks/2","title":"AtomTweaks.Tweaks.Tweak.include_forks/2","type":"function","doc":""},{"ref":"AtomTweaks.Tweaks.Tweak.html#validate_fork_by_different_user/2","title":"AtomTweaks.Tweaks.Tweak.validate_fork_by_different_user/2","type":"function","doc":"Validates that the person forking the tweak is different from the original author of the tweak."},{"ref":"AtomTweaks.Tweaks.Tweak.html#t:t/0","title":"AtomTweaks.Tweaks.Tweak.t/0","type":"type","doc":""},{"ref":"AtomTweaksWeb.Admin.ReleaseNoteView.html","title":"AtomTweaksWeb.Admin.ReleaseNoteView","type":"module","doc":""},{"ref":"AtomTweaksWeb.Admin.ReleaseNoteView.html#__phoenix_recompile__?/0","title":"AtomTweaksWeb.Admin.ReleaseNoteView.__phoenix_recompile__?/0","type":"function","doc":"Returns true whenever the list of templates changes in the filesystem."},{"ref":"AtomTweaksWeb.Admin.ReleaseNoteView.html#__resource__/0","title":"AtomTweaksWeb.Admin.ReleaseNoteView.__resource__/0","type":"function","doc":"The resource name, as an atom, for this view"},{"ref":"AtomTweaksWeb.Admin.ReleaseNoteView.html#__templates__/0","title":"AtomTweaksWeb.Admin.ReleaseNoteView.__templates__/0","type":"function","doc":"Returns the template root alongside all templates."},{"ref":"AtomTweaksWeb.Admin.ReleaseNoteView.html#render/2","title":"AtomTweaksWeb.Admin.ReleaseNoteView.render/2","type":"function","doc":"Renders the given template locally."},{"ref":"AtomTweaksWeb.Admin.ReleaseNoteView.html#template_not_found/2","title":"AtomTweaksWeb.Admin.ReleaseNoteView.template_not_found/2","type":"function","doc":"Callback invoked when no template is found. By default it raises but can be customized to render a particular template."},{"ref":"AtomTweaksWeb.Api.ReleaseNoteView.html","title":"AtomTweaksWeb.Api.ReleaseNoteView","type":"module","doc":""},{"ref":"AtomTweaksWeb.Api.ReleaseNoteView.html#__phoenix_recompile__?/0","title":"AtomTweaksWeb.Api.ReleaseNoteView.__phoenix_recompile__?/0","type":"function","doc":"Returns true whenever the list of templates changes in the filesystem."},{"ref":"AtomTweaksWeb.Api.ReleaseNoteView.html#__resource__/0","title":"AtomTweaksWeb.Api.ReleaseNoteView.__resource__/0","type":"function","doc":"The resource name, as an atom, for this view"},{"ref":"AtomTweaksWeb.Api.ReleaseNoteView.html#__templates__/0","title":"AtomTweaksWeb.Api.ReleaseNoteView.__templates__/0","type":"function","doc":"Returns the template root alongside all templates."},{"ref":"AtomTweaksWeb.Api.ReleaseNoteView.html#render/2","title":"AtomTweaksWeb.Api.ReleaseNoteView.render/2","type":"function","doc":"Renders the given template locally."},{"ref":"AtomTweaksWeb.Api.ReleaseNoteView.html#template_not_found/2","title":"AtomTweaksWeb.Api.ReleaseNoteView.template_not_found/2","type":"function","doc":"Callback invoked when no template is found. By default it raises but can be customized to render a particular template."},{"ref":"AtomTweaksWeb.ErrorView.html","title":"AtomTweaksWeb.ErrorView","type":"module","doc":"View functions for HTTP error states."},{"ref":"AtomTweaksWeb.ErrorView.html#__phoenix_recompile__?/0","title":"AtomTweaksWeb.ErrorView.__phoenix_recompile__?/0","type":"function","doc":"Returns true whenever the list of templates changes in the filesystem."},{"ref":"AtomTweaksWeb.ErrorView.html#__resource__/0","title":"AtomTweaksWeb.ErrorView.__resource__/0","type":"function","doc":"The resource name, as an atom, for this view"},{"ref":"AtomTweaksWeb.ErrorView.html#__templates__/0","title":"AtomTweaksWeb.ErrorView.__templates__/0","type":"function","doc":"Returns the template root alongside all templates."},{"ref":"AtomTweaksWeb.ErrorView.html#render/2","title":"AtomTweaksWeb.ErrorView.render/2","type":"function","doc":"Renders the page for the given template. Since we don&#39;t have fancy error pages yet, we&#39;re just rendering the text of the status code."},{"ref":"AtomTweaksWeb.ErrorView.html#template_not_found/2","title":"AtomTweaksWeb.ErrorView.template_not_found/2","type":"function","doc":"Callback invoked when no template is found. By default it raises but can be customized to render a particular template."},{"ref":"AtomTweaksWeb.ForkView.html","title":"AtomTweaksWeb.ForkView","type":"module","doc":""},{"ref":"AtomTweaksWeb.ForkView.html#__phoenix_recompile__?/0","title":"AtomTweaksWeb.ForkView.__phoenix_recompile__?/0","type":"function","doc":"Returns true whenever the list of templates changes in the filesystem."},{"ref":"AtomTweaksWeb.ForkView.html#__resource__/0","title":"AtomTweaksWeb.ForkView.__resource__/0","type":"function","doc":"The resource name, as an atom, for this view"},{"ref":"AtomTweaksWeb.ForkView.html#__templates__/0","title":"AtomTweaksWeb.ForkView.__templates__/0","type":"function","doc":"Returns the template root alongside all templates."},{"ref":"AtomTweaksWeb.ForkView.html#render/2","title":"AtomTweaksWeb.ForkView.render/2","type":"function","doc":"Renders the given template locally."},{"ref":"AtomTweaksWeb.ForkView.html#template_not_found/2","title":"AtomTweaksWeb.ForkView.template_not_found/2","type":"function","doc":"Callback invoked when no template is found. By default it raises but can be customized to render a particular template."},{"ref":"AtomTweaksWeb.LayoutView.html","title":"AtomTweaksWeb.LayoutView","type":"module","doc":""},{"ref":"AtomTweaksWeb.LayoutView.html#__phoenix_recompile__?/0","title":"AtomTweaksWeb.LayoutView.__phoenix_recompile__?/0","type":"function","doc":"Returns true whenever the list of templates changes in the filesystem."},{"ref":"AtomTweaksWeb.LayoutView.html#__resource__/0","title":"AtomTweaksWeb.LayoutView.__resource__/0","type":"function","doc":"The resource name, as an atom, for this view"},{"ref":"AtomTweaksWeb.LayoutView.html#__templates__/0","title":"AtomTweaksWeb.LayoutView.__templates__/0","type":"function","doc":"Returns the template root alongside all templates."},{"ref":"AtomTweaksWeb.LayoutView.html#render/2","title":"AtomTweaksWeb.LayoutView.render/2","type":"function","doc":"Renders the given template locally."},{"ref":"AtomTweaksWeb.LayoutView.html#template_not_found/2","title":"AtomTweaksWeb.LayoutView.template_not_found/2","type":"function","doc":"Callback invoked when no template is found. By default it raises but can be customized to render a particular template."},{"ref":"AtomTweaksWeb.PageView.html","title":"AtomTweaksWeb.PageView","type":"module","doc":""},{"ref":"AtomTweaksWeb.PageView.html#__phoenix_recompile__?/0","title":"AtomTweaksWeb.PageView.__phoenix_recompile__?/0","type":"function","doc":"Returns true whenever the list of templates changes in the filesystem."},{"ref":"AtomTweaksWeb.PageView.html#__resource__/0","title":"AtomTweaksWeb.PageView.__resource__/0","type":"function","doc":"The resource name, as an atom, for this view"},{"ref":"AtomTweaksWeb.PageView.html#__templates__/0","title":"AtomTweaksWeb.PageView.__templates__/0","type":"function","doc":"Returns the template root alongside all templates."},{"ref":"AtomTweaksWeb.PageView.html#render/2","title":"AtomTweaksWeb.PageView.render/2","type":"function","doc":"Renders the given template locally."},{"ref":"AtomTweaksWeb.PageView.html#template_not_found/2","title":"AtomTweaksWeb.PageView.template_not_found/2","type":"function","doc":"Callback invoked when no template is found. By default it raises but can be customized to render a particular template."},{"ref":"AtomTweaksWeb.PageView.html#tweak_title/1","title":"AtomTweaksWeb.PageView.tweak_title/1","type":"function","doc":"Get the appropriate title text based on the type of tweaks selected."},{"ref":"AtomTweaksWeb.StarView.html","title":"AtomTweaksWeb.StarView","type":"module","doc":""},{"ref":"AtomTweaksWeb.StarView.html#__phoenix_recompile__?/0","title":"AtomTweaksWeb.StarView.__phoenix_recompile__?/0","type":"function","doc":"Returns true whenever the list of templates changes in the filesystem."},{"ref":"AtomTweaksWeb.StarView.html#__resource__/0","title":"AtomTweaksWeb.StarView.__resource__/0","type":"function","doc":"The resource name, as an atom, for this view"},{"ref":"AtomTweaksWeb.StarView.html#__templates__/0","title":"AtomTweaksWeb.StarView.__templates__/0","type":"function","doc":"Returns the template root alongside all templates."},{"ref":"AtomTweaksWeb.StarView.html#render/2","title":"AtomTweaksWeb.StarView.render/2","type":"function","doc":"Renders the given template locally."},{"ref":"AtomTweaksWeb.StarView.html#template_not_found/2","title":"AtomTweaksWeb.StarView.template_not_found/2","type":"function","doc":"Callback invoked when no template is found. By default it raises but can be customized to render a particular template."},{"ref":"AtomTweaksWeb.StargazerView.html","title":"AtomTweaksWeb.StargazerView","type":"module","doc":""},{"ref":"AtomTweaksWeb.StargazerView.html#__phoenix_recompile__?/0","title":"AtomTweaksWeb.StargazerView.__phoenix_recompile__?/0","type":"function","doc":"Returns true whenever the list of templates changes in the filesystem."},{"ref":"AtomTweaksWeb.StargazerView.html#__resource__/0","title":"AtomTweaksWeb.StargazerView.__resource__/0","type":"function","doc":"The resource name, as an atom, for this view"},{"ref":"AtomTweaksWeb.StargazerView.html#__templates__/0","title":"AtomTweaksWeb.StargazerView.__templates__/0","type":"function","doc":"Returns the template root alongside all templates."},{"ref":"AtomTweaksWeb.StargazerView.html#render/2","title":"AtomTweaksWeb.StargazerView.render/2","type":"function","doc":"Renders the given template locally."},{"ref":"AtomTweaksWeb.StargazerView.html#template_not_found/2","title":"AtomTweaksWeb.StargazerView.template_not_found/2","type":"function","doc":"Callback invoked when no template is found. By default it raises but can be customized to render a particular template."},{"ref":"AtomTweaksWeb.TokenView.html","title":"AtomTweaksWeb.TokenView","type":"module","doc":""},{"ref":"AtomTweaksWeb.TokenView.html#__phoenix_recompile__?/0","title":"AtomTweaksWeb.TokenView.__phoenix_recompile__?/0","type":"function","doc":"Returns true whenever the list of templates changes in the filesystem."},{"ref":"AtomTweaksWeb.TokenView.html#__resource__/0","title":"AtomTweaksWeb.TokenView.__resource__/0","type":"function","doc":"The resource name, as an atom, for this view"},{"ref":"AtomTweaksWeb.TokenView.html#__templates__/0","title":"AtomTweaksWeb.TokenView.__templates__/0","type":"function","doc":"Returns the template root alongside all templates."},{"ref":"AtomTweaksWeb.TokenView.html#render/2","title":"AtomTweaksWeb.TokenView.render/2","type":"function","doc":"Renders the given template locally."},{"ref":"AtomTweaksWeb.TokenView.html#template_not_found/2","title":"AtomTweaksWeb.TokenView.template_not_found/2","type":"function","doc":"Callback invoked when no template is found. By default it raises but can be customized to render a particular template."},{"ref":"AtomTweaksWeb.TweakView.html","title":"AtomTweaksWeb.TweakView","type":"module","doc":""},{"ref":"AtomTweaksWeb.TweakView.html#__phoenix_recompile__?/0","title":"AtomTweaksWeb.TweakView.__phoenix_recompile__?/0","type":"function","doc":"Returns true whenever the list of templates changes in the filesystem."},{"ref":"AtomTweaksWeb.TweakView.html#__resource__/0","title":"AtomTweaksWeb.TweakView.__resource__/0","type":"function","doc":"The resource name, as an atom, for this view"},{"ref":"AtomTweaksWeb.TweakView.html#__templates__/0","title":"AtomTweaksWeb.TweakView.__templates__/0","type":"function","doc":"Returns the template root alongside all templates."},{"ref":"AtomTweaksWeb.TweakView.html#render/2","title":"AtomTweaksWeb.TweakView.render/2","type":"function","doc":"Renders the given template locally."},{"ref":"AtomTweaksWeb.TweakView.html#template_not_found/2","title":"AtomTweaksWeb.TweakView.template_not_found/2","type":"function","doc":"Callback invoked when no template is found. By default it raises but can be customized to render a particular template."},{"ref":"AtomTweaksWeb.UserView.html","title":"AtomTweaksWeb.UserView","type":"module","doc":""},{"ref":"AtomTweaksWeb.UserView.html#__phoenix_recompile__?/0","title":"AtomTweaksWeb.UserView.__phoenix_recompile__?/0","type":"function","doc":"Returns true whenever the list of templates changes in the filesystem."},{"ref":"AtomTweaksWeb.UserView.html#__resource__/0","title":"AtomTweaksWeb.UserView.__resource__/0","type":"function","doc":"The resource name, as an atom, for this view"},{"ref":"AtomTweaksWeb.UserView.html#__templates__/0","title":"AtomTweaksWeb.UserView.__templates__/0","type":"function","doc":"Returns the template root alongside all templates."},{"ref":"AtomTweaksWeb.UserView.html#render/2","title":"AtomTweaksWeb.UserView.render/2","type":"function","doc":"Renders the given template locally."},{"ref":"AtomTweaksWeb.UserView.html#template_not_found/2","title":"AtomTweaksWeb.UserView.template_not_found/2","type":"function","doc":"Callback invoked when no template is found. By default it raises but can be customized to render a particular template."},{"ref":"code_of_conduct.html","title":"Code of Conduct","type":"extras","doc":"Code of Conduct"},{"ref":"code_of_conduct.html#our-pledge","title":"Code of Conduct - Our Pledge","type":"extras","doc":"In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation."},{"ref":"code_of_conduct.html#our-standards","title":"Code of Conduct - Our Standards","type":"extras","doc":"Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others&#39; private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting"},{"ref":"code_of_conduct.html#our-responsibilities","title":"Code of Conduct - Our Responsibilities","type":"extras","doc":"Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful."},{"ref":"code_of_conduct.html#scope","title":"Code of Conduct - Scope","type":"extras","doc":"This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers."},{"ref":"code_of_conduct.html#enforcement","title":"Code of Conduct - Enforcement","type":"extras","doc":"Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at lee@lee-dohm.com. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project&#39;s leadership."},{"ref":"code_of_conduct.html#attribution","title":"Code of Conduct - Attribution","type":"extras","doc":"This Code of Conduct is adapted from the Contributor Covenant, version 1.4, available at http://contributor-covenant.org/version/1/4"},{"ref":"contributing.html","title":"Contributing","type":"extras","doc":"Contributing 👍🎉 First off, thanks for taking the time to contribute! 🎉👍 Our README describes the project, its purpose, and is necessary reading for contributors. This project adheres to a code of conduct. By participating, you are expected to uphold this code. Contributions to this project are made under the MIT License."},{"ref":"contributing.html#help-wanted","title":"Contributing - Help wanted","type":"extras","doc":"Browse open issues to see current requests. Open an issue to tell us about a bug. You may also open a pull request to propose specific changes, but it&#39;s always OK to start with an issue. Help with translating the website into other languages."},{"ref":"contributing.html#setting-up-the-development-environment","title":"Contributing - Setting up the development environment","type":"extras","doc":"You&#39;ll need to: Install PostgreSQL and start it Execute createuser --createdb postgres to create the standard development database user Create a GitHub OAuth app - set the callback URL to http://localhost:4000/auth/callback Copy .env.example to .env and set the GITHUB_CLIENT_ID and GITHUB_CLIENT_SECRET values to the ones obtained from the application in the previous step Run script/setup"},{"ref":"contributing.html#common-local-development-tasks","title":"Contributing - Common Local Development Tasks","type":"extras","doc":"This project follows the GitHub &quot;scripts to rule them all&quot; pattern. The contents of the scripts directory are scripts that cover all common tasks: script/setup &mdash; Performs first-time setup script/update &mdash; Performs periodic updating script/test &mdash; Runs automated tests, format and linter checks script/server &mdash; Launches the local development web server script/console &mdash; Opens the development console script/db-console &mdash; Opens the database console for the development database script/docs &mdash; Generates developer documentation script/translate &mdash; Extract and merge new message strings in priv/gettext See the documentation at the top of each script for more information about what each one does and is capable of. Other scripts that are available but not intended to be used directly by developers: script/bootstrap &mdash; Used to do a one-time install of all prerequisites for a development machine script/cibuild &mdash; Used to run automated tests in the CI environment"},{"ref":"contributing.html#heroku-hosting-notes","title":"Contributing - Heroku Hosting Notes","type":"extras","doc":"Heroku restricts us to 20 simultaneous database connections. We divide them like this: 14 connections for serving normal traffic 2 for scheduled tasks 2 for manual maintenance (see Executing Scripts) 2 reserved for future use Executing Scripts Occasionally, certain maintenance will need to be executed on staging or production. This is best achieved by the means of Elixir scripts. This way, they can be tested locally before we potentially screw up production. To execute a script in a Heroku environment, execute: heroku run &quot;POOL_SIZE=2 mix run path/to/script.exs&quot; The POOL_SIZE environment variable restricts the number of database connections that the task can utilize, since Heroku restricts us to 20 simultaneous database connections."},{"ref":"contributing.html#writing-tests","title":"Contributing - Writing Tests","type":"extras","doc":"Controller specs should verify: HTTP Status Redirects Assigns Session values Controller specs should not verify content View specs should verify that given the expected assigns, the right content is displayed"},{"ref":"contributing.html#translations","title":"Contributing - Translations","type":"extras","doc":"If you would like to help with translating Atom Tweaks into languages other than US English, you can: Create a new directory under priv/gettext that is the name of the locale for which you will be providing a translation (for example, to provide a translation for Brazilian Portuguese, it would be priv/gettext/pt_BR) Run the script/translate script to extract and merge the latest version of the strings Add your translations to the .po files under your new directory Submit a PR with your changes See the Gettext documentation for information about the file format."},{"ref":"contributing.html#resources","title":"Contributing - Resources","type":"extras","doc":"Contributing to Open Source on GitHub Using Pull Requests GitHub Help"},{"ref":"readme.html","title":"README","type":"extras","doc":"Atom Tweaks A website for collecting various simple tweaks for your Atom editor environment. This is the source code for the website running at https://www.atom-tweaks.com."},{"ref":"readme.html#developer-documentation","title":"README - Developer documentation","type":"extras","doc":"Developer docs can be found at https://www.lee-dohm.com/atom-style-tweaks/."},{"ref":"readme.html#contributing","title":"README - Contributing","type":"extras","doc":"See the Contributing Guide."},{"ref":"readme.html#license","title":"README - License","type":"extras","doc":"MIT"},{"ref":"license.html","title":"License","type":"extras","doc":"The MIT License (MIT) Copyright &copy; 2017-2018 Lee Dohm Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the &quot;Software&quot;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."}]